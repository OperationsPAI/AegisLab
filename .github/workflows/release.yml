name: Release and Publish SDK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string

env:
  CONTROLLER_DIR: src
  SDK_DIR: sdk/python-gen

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine hatchling
        go install github.com/swaggo/swag/cmd/swag@latest

    - name: Extract version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Update version in files
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update version in main.go
        sed -i "s/@version.*/@version         $VERSION/" $CONTROLLER_DIR/main.go
        
        # Update version in pyproject.toml
        sed -i "s/version = \".*\"/version = \"$VERSION\"/" $SDK_DIR/pyproject.toml

    - name: Generate Swagger documentation
      run: |
        cd $CONTROLLER_DIR
        swag init -d . --parseDependency --parseDepth 1 --output ./docs

    - name: Generate Python SDK
      run: |
        docker run --rm -u $(id -u):$(id -g) -v $(pwd):/local \
          openapitools/openapi-generator-cli:latest generate \
          -i /local/$CONTROLLER_DIR/docs/swagger.json \
          -g python \
          -o /local/$SDK_DIR \
          --additional-properties=packageName=openapi,projectName=rcabench

    - name: Build Python package
      run: |
        cd $SDK_DIR
        rm -rf dist/ build/ *.egg-info/
        python -m build

    - name: Check package
      run: |
        cd $SDK_DIR
        python -m twine check dist/*

    - name: Publish to Test PyPI
      if: github.event_name == 'workflow_dispatch'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        cd $SDK_DIR
        python -m twine upload --repository testpypi dist/*

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        cd $SDK_DIR
        python -m twine upload dist/*

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in ${{ steps.version.outputs.version }}
          
          - Updated RCABench API to version ${{ steps.version.outputs.version }}
          - Regenerated Python SDK with latest API changes
          - Published to PyPI as `rcabench`
          
          ### Installation
          ```bash
          pip install rcabench
          ```
          
          ### Usage
          ```python
          from openapi import ApiClient, Configuration
          
          config = Configuration(host="http://localhost:8080")
          client = ApiClient(config)
          ```
        draft: false
        prerelease: false

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-sdk-${{ steps.version.outputs.version }}
        path: ${{ env.SDK_DIR }}/dist/
