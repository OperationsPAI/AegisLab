# Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: "{{ .Values.images.redis.repository }}:{{ .Values.images.redis.tag }}"
          imagePullPolicy: "{{ .Values.images.redis.pullPolicy }}"
          ports:
            - containerPort: 6379

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      initContainers:
        - name: set-root-permissions
          image: "{{ .Values.images.mariadb.repository }}:{{ .Values.images.mariadb.tag }}"
          imagePullPolicy: "{{ .Values.images.mariadb.pullPolicy }}"
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}';" > /tmp/init/init.sql
              echo "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;" >> /tmp/init/init.sql
              echo "FLUSH PRIVILEGES;" >> /tmp/init/init.sql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "{{ .Values.config.mysqlRootPassword }}"
          volumeMounts:
            - name: init-scripts
              mountPath: /tmp/init
      containers:
        - name: mariadb
          image: "{{ .Values.images.mariadb.repository }}:{{ .Values.images.mariadb.tag }}"
          imagePullPolicy: "{{ .Values.images.mariadb.pullPolicy }}"
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "{{ .Values.config.mysqlRootPassword }}"
            - name: MYSQL_DATABASE
              value: rcabench
            - name: MYSQL_USER
              value: root
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mariadb-data
              mountPath: /var/lib/mysql
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: mariadb-config
              mountPath: /etc/mysql/conf.d/my.cnf
              subPath: my.cnf
      volumes:
        - name: mariadb-data
          persistentVolumeClaim:
            claimName: mariadb-data
        - name: init-scripts
          emptyDir: {}
        - name: mariadb-config
          configMap:
            name: mariadb-config

---
# exp 应用
apiVersion: apps/v1
kind: Deployment
metadata:
  name: producer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: producer
  template:
    metadata:
      labels:
        app: producer
    spec:
      initContainers:
        - name: wait-for-redis
          image: "{{ .Values.images.busybox.repository }}:{{ .Values.images.busybox.tag }}"
          imagePullPolicy: "{{ .Values.images.busybox.pullPolicy }}"
          command:
            - sh
            - -c
            - >
              while ! nc -z redis 6379; do
                echo "Waiting for Redis...";
                sleep 3;
              done;
        - name: wait-for-mariadb
          image: "{{ .Values.images.busybox.repository }}:{{ .Values.images.busybox.tag }}"
          imagePullPolicy: "{{ .Values.images.busybox.pullPolicy }}"
          command:
            - sh
            - -c
            - >
              while ! nc -z mariadb 3306; do
                echo "Waiting for MariaDB...";
                sleep 3;
              done;
      containers:
        - name: exp
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command: ["/app/entrypoint.sh", "producer", "8081"]
          ports:
            - containerPort: 8081
          env:
            - name: GOPRIVATE
              value: "github.com/CUHK-SE-Group/chaos-experiment"
            - name: ENV
              value: "prod"
          volumeMounts:
            - name: config
              mountPath: /etc/rcabench/config.prod.toml
              subPath: config.prod.toml
            - name: kube-config
              mountPath: /root/.kube/config
              subPath: config
            - name: data
              mountPath: /var/lib/rcabench
            - name: algorithms-data
              mountPath: "{{ .Values.configmap.algo.storage_path }}"
      volumes:
        - name: config
          configMap:
            name: rcabench-config
        - name: kube-config
          secret:
            secretName: kube-config
            items:
              - key: kubeconfig
                path: config
        - name: data
          persistentVolumeClaim:
            claimName: nfs-shared-pvc
        - name: algorithms-data
          persistentVolumeClaim:
            claimName: algorithms-data
---
# exp 应用
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      initContainers:
        - name: wait-for-redis
          image: "{{ .Values.images.busybox.repository }}:{{ .Values.images.busybox.tag }}"
          imagePullPolicy: "{{ .Values.images.busybox.pullPolicy }}"
          command:
            - sh
            - -c
            - >
              while ! nc -z redis 6379; do
                echo "Waiting for Redis...";
                sleep 3;
              done;
        - name: wait-for-mariadb
          image: "{{ .Values.images.busybox.repository }}:{{ .Values.images.busybox.tag }}"
          imagePullPolicy: "{{ .Values.images.busybox.pullPolicy }}"
          command:
            - sh
            - -c
            - >
              while ! nc -z mariadb 3306; do
                echo "Waiting for MariaDB...";
                sleep 3;
              done;
      containers:
        - name: exp
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          command: ["/app/entrypoint.sh", "consumer"]
          env:
            - name: GOPRIVATE
              value: "github.com/CUHK-SE-Group/chaos-experiment"
            - name: ENV
              value: "prod"
          volumeMounts:
            - name: config
              mountPath: /etc/rcabench/config.prod.toml
              subPath: config.prod.toml
            - name: kube-config
              mountPath: /root/.kube/config
              subPath: config
            - name: data
              mountPath: /var/lib/rcabench
            - name: algorithms-data
              mountPath: "{{ .Values.configmap.algo.storage_path }}"
            - name: docker-config-volume
              mountPath: /root/.docker/config.json
              subPath: config.json
      volumes:
        - name: config
          configMap:
            name: rcabench-config
        - name: kube-config
          secret:
            secretName: kube-config
            items:
              - key: kubeconfig
                path: config
        - name: data
          persistentVolumeClaim:
            claimName: nfs-shared-pvc
        - name: algorithms-data
          persistentVolumeClaim:
            claimName: algorithms-data
        - name: docker-config-volume
          secret:
            secretName: docker-config
            items:
              - key: config.json
                path: config.json

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: buildkit
spec:
  replicas: 1
  selector:
    matchLabels:
      app: buildkit
  template:
    metadata:
      labels:
        app: buildkit
    spec:
      containers:
        - name: buildkit
          image: "{{ .Values.images.buildkit.repository }}:{{ .Values.images.buildkit.tag }}"
          imagePullPolicy: "{{ .Values.images.buildkit.pullPolicy }}"
          args:
            - --config
            - /etc/buildkit/buildkitd.toml
          ports:
            - containerPort: 1234
            - containerPort: 5678
          securityContext:
            privileged: true
          volumeMounts:
            - name: config
              mountPath: /etc/rcabench/config.prod.toml
              subPath: config.prod.toml
            - name: kube-config
              mountPath: /root/.kube/config
              subPath: config
            - name: data
              mountPath: /var/lib/rcabench
            - name: algorithms-data
              mountPath: "{{ .Values.configmap.algo.storage_path }}"
            - name: buildkit-socket
              mountPath: /run/buildkit
            - name: buildkit-config
              mountPath: /etc/buildkit/buildkitd.toml
              subPath: buildkitd.toml
            - name: harbor-cert
              mountPath: /usr/local/share/ca-certificates/harbor.lab.pj.crt
              subPath: harbor.lab.pj.crt
      volumes:
        - name: config
          configMap:
            name: rcabench-config
        - name: kube-config
          secret:
            secretName: kube-config
            items:
              - key: kubeconfig
                path: config
        - name: data
          persistentVolumeClaim:
            claimName: nfs-shared-pvc
        - name: algorithms-data
          persistentVolumeClaim:
            claimName: algorithms-data
        - name: buildkit-socket
          emptyDir: {}
        - name: buildkit-config
          configMap:
            name: buildkit-config
        - name: harbor-cert
          secret:
            secretName: harbor-cert
            items:
              - key: harbor.lab.pj.crt
                path: harbor.lab.pj.crt
