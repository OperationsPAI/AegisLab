basePath: /api/v1
definitions:
  consts.TaskType:
    enum:
    - RestartService
    - RunAlgorithm
    - FaultInjection
    - BuildImage
    - BuildDataset
    - CollectResult
    type: string
    x-enum-varnames:
    - TaskTypeRestartService
    - TaskTypeRunAlgorithm
    - TaskTypeFaultInjection
    - TaskTypeBuildImage
    - TaskTypeBuildDataset
    - TaskTypeCollectResult
  database.Container:
    properties:
      command:
        description: Startup command
        type: string
      created_at:
        description: Creation time
        type: string
      env_vars:
        description: List of environment variable names
        type: string
      id:
        description: Unique identifier
        type: integer
      image:
        description: Image name
        type: string
      is_public:
        description: Whether publicly visible
        type: boolean
      name:
        description: Name
        type: string
      status:
        description: '0: deleted 1: active'
        type: boolean
      tag:
        description: Image tag
        type: string
      type:
        description: Image type
        type: string
      updated_at:
        description: Update time
        type: string
      user:
        allOf:
        - $ref: '#/definitions/database.User'
        description: Foreign key association
      user_id:
        description: Container must belong to a user
        type: integer
    type: object
  database.FaultInjectionSchedule:
    properties:
      benchmark:
        description: Benchmark database, add index
        type: string
      created_at:
        description: Creation time, add time index
        type: string
      description:
        description: Description (optional field)
        type: string
      display_config:
        description: User-facing display configuration
        type: string
      end_time:
        description: Expected fault end time, add time index
        type: string
      engine_config:
        description: System-facing runtime configuration
        type: string
      fault_type:
        description: Fault type, add composite index
        type: integer
      id:
        description: Unique identifier
        type: integer
      injection_name:
        description: Name injected in k8s resources
        type: string
      pre_duration:
        description: Normal data duration
        type: integer
      start_time:
        description: Expected fault start time, add time index
        type: string
      status:
        description: Status, add composite index
        type: integer
      task:
        allOf:
        - $ref: '#/definitions/database.Task'
        description: Foreign key association
      task_id:
        description: Associated task ID, add composite index
        type: string
      updated_at:
        description: Update time
        type: string
    type: object
  database.Label:
    properties:
      category:
        description: Label category (dataset, fault_injection, algorithm, container,
          etc.)
        type: string
      color:
        description: Label color (hex format)
        type: string
      created_at:
        description: Creation time
        type: string
      description:
        description: Label description
        type: string
      id:
        description: Unique identifier
        type: integer
      is_system:
        description: Whether system label
        type: boolean
      key:
        description: Label key
        type: string
      updated_at:
        description: Update time
        type: string
      usage:
        description: Usage count
        type: integer
      value:
        description: Label value
        type: string
    type: object
  database.Project:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_public:
        description: Whether publicly visible
        type: boolean
      name:
        type: string
      status:
        description: 0:disabled 1:enabled -1:deleted
        type: integer
      updated_at:
        type: string
    type: object
  database.Task:
    properties:
      created_at:
        description: Add time index
        type: string
      cron_expr:
        type: string
      execute_time:
        description: Add execution time index
        type: integer
      group_id:
        description: Add group ID index
        type: string
      id:
        type: string
      immediate:
        type: boolean
      payload:
        type: string
      project:
        allOf:
        - $ref: '#/definitions/database.Project'
        description: Foreign key association
      project_id:
        description: Task can belong to a project (optional)
        type: integer
      status:
        description: Add multiple composite indexes
        type: string
      trace_id:
        description: Add trace ID index
        type: string
      type:
        description: Add composite index
        type: string
      updated_at:
        type: string
    type: object
  database.User:
    properties:
      avatar:
        description: Avatar URL
        type: string
      created_at:
        description: Creation time
        type: string
      email:
        description: Email (unique)
        type: string
      full_name:
        description: Full name
        type: string
      id:
        description: Unique identifier
        type: integer
      is_active:
        description: Whether active
        type: boolean
      last_login_at:
        description: Last login time
        type: string
      phone:
        description: Phone number
        type: string
      status:
        description: 0:disabled 1:enabled -1:deleted
        type: integer
      updated_at:
        description: Update time
        type: string
      username:
        description: Username (unique)
        type: string
    type: object
  dto.AdvancedSearchRequest:
    properties:
      created_at:
        allOf:
        - $ref: '#/definitions/dto.DateRange'
        description: Common filters shortcuts
      exclude_fields:
        items:
          type: string
        type: array
      filters:
        description: Filters
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      include:
        description: Include related entities
        items:
          type: string
        type: array
      include_fields:
        description: Include/Exclude fields
        items:
          type: string
        type: array
      is_active:
        type: boolean
      keyword:
        description: Search keyword (for general text search)
        type: string
      page:
        description: Pagination
        minimum: 1
        type: integer
      project_id:
        type: integer
      size:
        maximum: 1000
        minimum: 1
        type: integer
      sort:
        description: Sort
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      status:
        items:
          type: integer
        type: array
      updated_at:
        $ref: '#/definitions/dto.DateRange'
      user_id:
        type: integer
    type: object
  dto.AlgorithmDatasetPair:
    properties:
      algorithm:
        type: string
      dataset:
        type: string
    type: object
  dto.AlgorithmItem:
    properties:
      image:
        type: string
      name:
        type: string
      tag:
        type: string
    required:
    - name
    type: object
  dto.AlgorithmResponse:
    properties:
      command:
        type: string
      created_at:
        type: string
      env_vars:
        type: string
      id:
        type: integer
      image:
        type: string
      is_public:
        type: boolean
      name:
        type: string
      project:
        allOf:
        - $ref: '#/definitions/dto.ProjectResponse'
        description: Related entities (only included when specifically requested)
      project_id:
        type: integer
      status:
        type: boolean
      tag:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.AlgorithmResultUploadResponse:
    properties:
      algorithm_id:
        type: integer
      execution_id:
        type: integer
      has_anomalies:
        description: Only included for detector results
        type: boolean
      message:
        type: string
      result_count:
        type: integer
      uploaded_at:
        type: string
    type: object
  dto.AlgorithmSearchRequest:
    properties:
      created_at:
        allOf:
        - $ref: '#/definitions/dto.DateRange'
        description: Common filters shortcuts
      exclude_fields:
        items:
          type: string
        type: array
      filters:
        description: Filters
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      image:
        type: string
      include:
        description: Include related entities
        items:
          type: string
        type: array
      include_fields:
        description: Include/Exclude fields
        items:
          type: string
        type: array
      is_active:
        type: boolean
      keyword:
        description: Search keyword (for general text search)
        type: string
      name:
        description: Algorithm-specific filters
        type: string
      page:
        description: Pagination
        minimum: 1
        type: integer
      project_id:
        type: integer
      size:
        maximum: 1000
        minimum: 1
        type: integer
      sort:
        description: Sort
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      status:
        items:
          type: integer
        type: array
      tag:
        type: string
      type:
        type: string
      updated_at:
        $ref: '#/definitions/dto.DateRange'
      user_id:
        type: integer
    type: object
  dto.AnalyzeInjectionsResp:
    properties:
      efficiency:
        type: string
      stats:
        additionalProperties:
          $ref: '#/definitions/dto.InjectionStats'
        type: object
    type: object
  dto.AssignPermissionToRoleRequest:
    type: object
  dto.AssignRolePermissionRequest:
    type: object
  dto.AssignUserPermissionRequest:
    properties:
      expires_at:
        example: "2024-12-31T23:59:59Z"
        type: string
      grant_type:
        enum:
        - grant
        - deny
        example: grant
        type: string
      permission_id:
        example: 1
        type: integer
      project_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    required:
    - grant_type
    - permission_id
    - user_id
    type: object
  dto.AssignUserRoleRequest:
    properties:
      role_id:
        example: 2
        type: integer
      user_id:
        example: 1
        type: integer
    required:
    - role_id
    - user_id
    type: object
  dto.AssignUserToProjectRequest:
    properties:
      project_id:
        example: 1
        type: integer
      role_id:
        example: 2
        type: integer
    required:
    - project_id
    - role_id
    type: object
  dto.AttributeCoverageItem:
    properties:
      coverage:
        type: number
      num:
        type: integer
    type: object
  dto.AuditLogListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.AuditLogResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.AuditLogRequest:
    properties:
      action:
        example: CREATE_USER
        type: string
      details:
        example: '{"username":"newuser"}'
        type: string
      resource:
        example: users
        type: string
      resource_id:
        example: 123
        type: integer
    required:
    - action
    - resource
    type: object
  dto.AuditLogResponse:
    properties:
      action:
        example: CREATE_USER
        type: string
      details:
        example: '{"username":"newuser"}'
        type: string
      error:
        type: string
      id:
        example: 1
        type: integer
      ip_address:
        example: 192.168.1.100
        type: string
      resource:
        example: users
        type: string
      resource_id:
        example: "123"
        type: string
      success:
        example: true
        type: boolean
      timestamp:
        example: "2024-01-01T12:00:00Z"
        type: string
      user_agent:
        example: Mozilla/5.0...
        type: string
      user_id:
        example: 1
        type: integer
      username:
        example: admin
        type: string
    type: object
  dto.BatchRelationRequest:
    properties:
      operations:
        items:
          $ref: '#/definitions/dto.RelationOperation'
        minItems: 1
        type: array
    required:
    - operations
    type: object
  dto.ChangePasswordRequest:
    properties:
      new_password:
        example: newpassword123
        minLength: 8
        type: string
      old_password:
        example: oldpassword123
        type: string
    required:
    - new_password
    - old_password
    type: object
  dto.ContainerResponse:
    properties:
      command:
        type: string
      created_at:
        type: string
      env_vars:
        type: string
      id:
        type: integer
      image:
        type: string
      is_public:
        type: boolean
      name:
        type: string
      status:
        type: boolean
      tag:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/dto.UserResponse'
        description: Related entities (only included when specifically requested)
      user_id:
        type: integer
    type: object
  dto.ContainerSearchRequest:
    properties:
      command:
        type: string
      created_at:
        allOf:
        - $ref: '#/definitions/dto.DateRange'
        description: Common filters shortcuts
      exclude_fields:
        items:
          type: string
        type: array
      filters:
        description: Filters
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      image:
        type: string
      include:
        description: Include related entities
        items:
          type: string
        type: array
      include_fields:
        description: Include/Exclude fields
        items:
          type: string
        type: array
      is_active:
        type: boolean
      keyword:
        description: Search keyword (for general text search)
        type: string
      name:
        description: Container-specific filters
        type: string
      page:
        description: Pagination
        minimum: 1
        type: integer
      project_id:
        type: integer
      size:
        maximum: 1000
        minimum: 1
        type: integer
      sort:
        description: Sort
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      status:
        items:
          type: integer
        type: array
      tag:
        type: string
      type:
        type: string
      updated_at:
        $ref: '#/definitions/dto.DateRange'
      user_id:
        type: integer
    type: object
  dto.ContainerStatistics:
    properties:
      active:
        example: 20
        type: integer
      deleted:
        example: 5
        type: integer
      total:
        example: 25
        type: integer
    type: object
  dto.CreatePermissionRequest:
    properties:
      action:
        example: read
        type: string
      description:
        example: Permission to read dataset information
        type: string
      display_name:
        example: Read Datasets
        type: string
      name:
        example: read_datasets
        type: string
      resource_id:
        example: 1
        type: integer
    required:
    - action
    - display_name
    - name
    - resource_id
    type: object
  dto.CreateRoleRequest:
    properties:
      description:
        example: Role for data analysis operations
        type: string
      display_name:
        example: Data Analyst
        type: string
      name:
        example: data_analyst
        type: string
      type:
        enum:
        - system
        - custom
        example: custom
        type: string
    required:
    - display_name
    - name
    - type
    type: object
  dto.CreateUserRequest:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      email:
        example: user@example.com
        type: string
      full_name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      phone:
        example: "+1234567890"
        type: string
      username:
        example: newuser
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  dto.DatasetBuildPayload:
    properties:
      benchmark:
        type: string
      env_vars:
        type: object
      name:
        type: string
      pre_duration:
        type: integer
    required:
    - name
    type: object
  dto.DatasetDeleteResp:
    properties:
      failed_names:
        items:
          type: string
        type: array
      success_count:
        type: integer
    type: object
  dto.DatasetSearchResponse:
    properties:
      items:
        description: Result list
        items:
          $ref: '#/definitions/dto.DatasetV2Response'
        type: array
      pagination:
        allOf:
        - $ref: '#/definitions/dto.PaginationInfo'
        description: Pagination info
    type: object
  dto.DatasetStatistics:
    properties:
      private:
        example: 70
        type: integer
      public:
        example: 30
        type: integer
      total:
        example: 100
        type: integer
      total_size:
        example: 1073741824
        type: integer
    type: object
  dto.DatasetV2CreateReq:
    properties:
      data_source:
        description: Data source description
        maxLength: 500
        type: string
      description:
        description: Dataset description
        maxLength: 1000
        type: string
      format:
        description: Data format
        maxLength: 50
        type: string
      injection_ids:
        description: Associated fault injection ID list
        items:
          type: integer
        type: array
      is_public:
        description: Whether public, optional, defaults to false
        type: boolean
      label_ids:
        description: Associated label ID list
        items:
          type: integer
        type: array
      name:
        description: Dataset name
        maxLength: 255
        type: string
      new_labels:
        description: New label list
        items:
          $ref: '#/definitions/dto.DatasetV2LabelCreateReq'
        type: array
      project_id:
        description: Project ID
        minimum: 1
        type: integer
      type:
        description: Dataset type
        maxLength: 50
        type: string
      version:
        description: Dataset version, optional, defaults to v1.0
        maxLength: 50
        type: string
    required:
    - name
    - project_id
    - type
    type: object
  dto.DatasetV2InjectionManageReq:
    properties:
      add_injections:
        description: List of fault injection IDs to add
        items:
          type: integer
        type: array
      remove_injections:
        description: List of fault injection IDs to remove
        items:
          type: integer
        type: array
    type: object
  dto.DatasetV2InjectionRelationResponse:
    properties:
      created_at:
        description: Creation time
        type: string
      fault_injection:
        allOf:
        - $ref: '#/definitions/database.FaultInjectionSchedule'
        description: Fault injection details
      fault_injection_id:
        description: Fault injection ID
        type: integer
      id:
        description: Relation ID
        type: integer
      updated_at:
        description: Update time
        type: string
    type: object
  dto.DatasetV2LabelCreateReq:
    properties:
      category:
        description: Label category
        maxLength: 50
        type: string
      color:
        description: Label color (hex format)
        maxLength: 7
        type: string
      description:
        description: Label description
        maxLength: 500
        type: string
      key:
        description: Label key
        maxLength: 100
        type: string
      value:
        description: Label value
        maxLength: 255
        type: string
    required:
    - key
    - value
    type: object
  dto.DatasetV2LabelManageReq:
    properties:
      add_labels:
        description: List of label IDs to add
        items:
          type: integer
        type: array
      new_labels:
        description: New label list
        items:
          $ref: '#/definitions/dto.DatasetV2LabelCreateReq'
        type: array
      remove_labels:
        description: List of label IDs to remove
        items:
          type: integer
        type: array
    type: object
  dto.DatasetV2Response:
    properties:
      checksum:
        description: File checksum
        type: string
      created_at:
        description: Creation time
        type: string
      data_source:
        description: Data source description
        type: string
      description:
        description: Dataset description
        type: string
      download_url:
        description: Download URL
        type: string
      file_count:
        description: File count
        type: integer
      format:
        description: Data format
        type: string
      id:
        description: Unique identifier
        type: integer
      injections:
        description: Associated fault injections
        items:
          $ref: '#/definitions/dto.DatasetV2InjectionRelationResponse'
        type: array
      is_public:
        description: Whether public
        type: boolean
      labels:
        description: Associated labels
        items:
          $ref: '#/definitions/database.Label'
        type: array
      name:
        description: Dataset name
        type: string
      project:
        allOf:
        - $ref: '#/definitions/database.Project'
        description: Associated project info
      project_id:
        description: Project ID
        type: integer
      status:
        description: Status
        type: integer
      type:
        description: Dataset type
        type: string
      updated_at:
        description: Update time
        type: string
      version:
        description: Dataset version
        type: string
    type: object
  dto.DatasetV2SearchReq:
    properties:
      date_range:
        allOf:
        - $ref: '#/definitions/dto.DateRangeFilter'
        description: Date range filter
      include:
        description: Included related data
        items:
          type: string
        type: array
      is_public:
        description: Whether public
        type: boolean
      label_keys:
        description: Filter by label key
        items:
          type: string
        type: array
      label_values:
        description: Filter by label value
        items:
          type: string
        type: array
      page:
        description: Page number
        minimum: 1
        type: integer
      project_ids:
        description: Project ID list
        items:
          type: integer
        type: array
      search:
        description: Search keywords
        type: string
      size:
        description: Page size
        maximum: 100
        minimum: 1
        type: integer
      size_range:
        allOf:
        - $ref: '#/definitions/dto.SizeRangeFilter'
        description: Size range filter
      sort_by:
        description: Sort field
        type: string
      sort_order:
        description: Sort direction
        type: string
      statuses:
        description: Status list
        items:
          type: integer
        type: array
      types:
        description: Dataset type list
        items:
          type: string
        type: array
    type: object
  dto.DatasetV2UpdateReq:
    properties:
      data_source:
        description: Data source description
        maxLength: 500
        type: string
      description:
        description: Dataset description
        maxLength: 1000
        type: string
      format:
        description: Data format
        maxLength: 50
        type: string
      injection_ids:
        description: Update associated fault injection ID list (complete replacement)
        items:
          type: integer
        type: array
      is_public:
        description: Whether public
        type: boolean
      label_ids:
        description: Update associated label ID list (complete replacement)
        items:
          type: integer
        type: array
      name:
        description: Dataset name
        maxLength: 255
        type: string
      new_labels:
        description: New label list
        items:
          $ref: '#/definitions/dto.DatasetV2LabelCreateReq'
        type: array
      type:
        description: Dataset type
        maxLength: 50
        type: string
      version:
        description: Dataset version
        maxLength: 50
        type: string
    type: object
  dto.DateRange:
    properties:
      from:
        type: string
      to:
        type: string
    type: object
  dto.DateRangeFilter:
    properties:
      end_time:
        description: End time
        type: string
      start_time:
        description: Start time
        type: string
    type: object
  dto.DetectorResultItem:
    properties:
      abnormal_avg_duration:
        type: number
      abnormal_p90:
        type: number
      abnormal_p95:
        type: number
      abnormal_p99:
        type: number
      abnormal_succ_rate:
        type: number
      issues:
        type: string
      normal_avg_duration:
        type: number
      normal_p90:
        type: number
      normal_p95:
        type: number
      normal_p99:
        type: number
      normal_succ_rate:
        type: number
      span_name:
        type: string
    required:
    - issues
    - span_name
    type: object
  dto.DetectorResultRequest:
    properties:
      results:
        items:
          $ref: '#/definitions/dto.DetectorResultItem'
        type: array
    required:
    - results
    type: object
  dto.ExecutionPayload:
    properties:
      algorithm:
        $ref: '#/definitions/dto.AlgorithmItem'
      dataset:
        type: string
      env_vars:
        type: object
    required:
    - algorithm
    - dataset
    type: object
  dto.ExecutionStatistics:
    properties:
      failed:
        example: 50
        type: integer
      successful:
        example: 750
        type: integer
      total:
        example: 800
        type: integer
    type: object
  dto.FaultInjectionNoIssuesResp:
    properties:
      dataset_id:
        type: integer
      engine_config:
        $ref: '#/definitions/handler.Node'
      injection_name:
        type: string
    type: object
  dto.FaultInjectionWithIssuesResp:
    properties:
      abnormal_avg_duration:
        type: number
      abnormal_p99:
        type: number
      abnormal_succ_rate:
        type: number
      dataset_id:
        type: integer
      engine_config:
        $ref: '#/definitions/handler.Node'
      injection_name:
        type: string
      issues:
        type: string
      normal_avg_duration:
        type: number
      normal_p99:
        type: number
      normal_succ_rate:
        type: number
    type: object
  dto.FilterOperator:
    enum:
    - eq
    - ne
    - gt
    - gte
    - lt
    - lte
    - like
    - starts
    - ends
    - nlike
    - in
    - nin
    - "null"
    - nnull
    - deq
    - dafter
    - dbefore
    - dbetween
    type: string
    x-enum-comments:
      OpDateAfter: DATE(field) > DATE(value)
      OpDateBefore: DATE(field) < DATE(value)
      OpDateBetween: DATE(field) BETWEEN date1 AND date2
      OpDateEqual: DATE(field) = DATE(value)
      OpEndsWith: LIKE %value
      OpEqual: ==
      OpGreater: '>'
      OpGreaterEq: '>='
      OpIn: IN (value1, value2, ...)
      OpIsNotNull: IS NOT NULL
      OpIsNull: IS NULL
      OpLess: <
      OpLessEq: <=
      OpLike: LIKE %value%
      OpNotEqual: '!='
      OpNotIn: NOT IN (value1, value2, ...)
      OpNotLike: NOT LIKE %value%
      OpStartsWith: LIKE value%
    x-enum-varnames:
    - OpEqual
    - OpNotEqual
    - OpGreater
    - OpGreaterEq
    - OpLess
    - OpLessEq
    - OpLike
    - OpStartsWith
    - OpEndsWith
    - OpNotLike
    - OpIn
    - OpNotIn
    - OpIsNull
    - OpIsNotNull
    - OpDateEqual
    - OpDateAfter
    - OpDateBefore
    - OpDateBetween
  dto.GenericResponse-any:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-array_dto_FaultInjectionNoIssuesResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/dto.FaultInjectionNoIssuesResp'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-array_dto_FaultInjectionWithIssuesResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/dto.FaultInjectionWithIssuesResp'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-array_dto_PermissionResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/dto.PermissionResponse'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-array_dto_RoleResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/dto.RoleResponse'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-array_dto_UserResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_AlgorithmResultUploadResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.AlgorithmResultUploadResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_AnalyzeInjectionsResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.AnalyzeInjectionsResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_AuditLogListResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.AuditLogListResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_AuditLogResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.AuditLogResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_ContainerResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.ContainerResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_DatasetDeleteResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.DatasetDeleteResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_DatasetSearchResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.DatasetSearchResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_DatasetV2Response:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.DatasetV2Response'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_GetCompletedMapResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.GetCompletedMapResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_GroundTruthResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.GroundTruthResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_HealthCheckResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.HealthCheckResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_InjectCancelResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.InjectCancelResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_InjectionFieldMappingResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.InjectionFieldMappingResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_InjectionSearchResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.InjectionSearchResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_InjectionStatsResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.InjectionStatsResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_InjectionV2Response:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.InjectionV2Response'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_ListAlgorithmsResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/database.Container'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_ListInjectionsResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.ListInjectionsResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_ListTasksResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/database.Task'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_LoginResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.LoginResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_MonitoringMetricsResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.MonitoringMetricsResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_NsResourcesResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.NsResourcesResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_PaginationResp-dto_UnifiedTask:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.PaginationResp-dto_UnifiedTask'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_PermissionListResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.PermissionListResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_PermissionResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.PermissionResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_QueryInjectionResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.QueryInjectionResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_RawDataResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/dto.RawDataItem'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_RelationListResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.RelationListResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_RelationStatisticsResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.RelationStatisticsResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_RoleListResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.RoleListResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_RoleResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.RoleResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SearchResponse-dto_AlgorithmResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SearchResponse-dto_AlgorithmResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SearchResponse-dto_ContainerResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SearchResponse-dto_ContainerResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SearchResponse-dto_DatasetV2Response:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SearchResponse-dto_DatasetV2Response'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SearchResponse-dto_InjectionV2Response:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SearchResponse-dto_InjectionV2Response'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SearchResponse-dto_PermissionResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SearchResponse-dto_PermissionResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SearchResponse-dto_RoleResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SearchResponse-dto_RoleResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SearchResponse-dto_TaskResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SearchResponse-dto_TaskResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SearchResponse-dto_UserResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SearchResponse-dto_UserResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SubmitInjectionResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SubmitInjectionResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SubmitResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SubmitResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SuccessfulExecutionsResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        description: Generic type data
        items:
          $ref: '#/definitions/dto.SuccessfulExecutionItem'
        type: array
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SystemInfo:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SystemInfo'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_SystemStatisticsResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.SystemStatisticsResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_TaskDetailResp:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.TaskDetailResp'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_TaskDetailResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.TaskDetailResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_TokenRefreshResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.TokenRefreshResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_TraceStats:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.TraceStats'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_UserInfo:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.UserInfo'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_UserListResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.UserListResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-dto_UserResponse:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/dto.UserResponse'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-handler_Node:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/handler.Node'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GenericResponse-handler_Resources:
    properties:
      code:
        description: Status code
        type: integer
      data:
        allOf:
        - $ref: '#/definitions/handler.Resources'
        description: Generic type data
      message:
        description: Response message
        type: string
      timestamp:
        description: Response generation time
        type: integer
    type: object
  dto.GetCompletedMapResp:
    properties:
      has_anomaly:
        description: List of trace IDs with detected anomalies
        items:
          type: string
        type: array
      no_anomaly:
        description: List of trace IDs without anomalies
        items:
          type: string
        type: array
    type: object
  dto.GranularityRecord:
    properties:
      confidence:
        type: number
      level:
        type: string
      rank:
        type: integer
      result:
        type: string
    type: object
  dto.GranularityResultEnhancedRequest:
    properties:
      datapack_id:
        description: Required if no execution_id
        type: integer
      results:
        items:
          $ref: '#/definitions/dto.GranularityResultItem'
        type: array
    required:
    - results
    type: object
  dto.GranularityResultItem:
    properties:
      confidence:
        maximum: 1
        minimum: 0
        type: number
      level:
        type: string
      rank:
        minimum: 1
        type: integer
      result:
        type: string
    required:
    - confidence
    - level
    - rank
    - result
    type: object
  dto.GroundTruthReq:
    properties:
      datasets:
        items:
          type: string
        type: array
    required:
    - datasets
    type: object
  dto.GroundTruthResp:
    additionalProperties:
      $ref: '#/definitions/handler.Groundtruth'
    type: object
  dto.HealthCheckResponse:
    properties:
      services:
        additionalProperties:
          $ref: '#/definitions/dto.ServiceInfo'
        type: object
      status:
        example: healthy
        type: string
      timestamp:
        example: "2024-01-01T12:00:00Z"
        type: string
      uptime:
        example: 72h30m15s
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  dto.InjectCancelResp:
    type: object
  dto.InjectionDiversity:
    properties:
      attribute_coverages:
        additionalProperties:
          additionalProperties:
            $ref: '#/definitions/dto.AttributeCoverageItem'
          type: object
        type: object
      fault_distribution:
        additionalProperties:
          type: integer
        type: object
      fault_service_coverages:
        additionalProperties:
          $ref: '#/definitions/dto.ServiceCoverageItem'
        type: object
      pair_distribution:
        items:
          $ref: '#/definitions/dto.PairStats'
        type: array
      service_distribution:
        additionalProperties:
          type: integer
        type: object
    type: object
  dto.InjectionFieldMappingResp:
    properties:
      fault_resource:
        type: object
      fault_type:
        type: object
      status:
        type: object
    type: object
  dto.InjectionItem:
    properties:
      batch:
        type: string
      benchmark:
        type: string
      created_at:
        type: string
      display_config:
        type: string
      end_time:
        type: string
      engine_config:
        type: string
      env:
        type: string
      fault_type:
        type: integer
      id:
        type: integer
      injection_name:
        type: string
      pre_duration:
        type: integer
      start_time:
        type: string
      status:
        type: integer
      tag:
        type: string
    type: object
  dto.InjectionSearchResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.InjectionV2Response'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.InjectionStatistics:
    properties:
      completed:
        example: 480
        type: integer
      failed:
        example: 5
        type: integer
      running:
        example: 5
        type: integer
      scheduled:
        example: 10
        type: integer
      total:
        example: 500
        type: integer
    type: object
  dto.InjectionStats:
    properties:
      diversity:
        $ref: '#/definitions/dto.InjectionDiversity'
    type: object
  dto.InjectionStatsResp:
    properties:
      no_issues_injections:
        type: integer
      no_issues_records:
        type: integer
      with_issues_injections:
        type: integer
      with_issues_records:
        type: integer
    type: object
  dto.InjectionV2Response:
    properties:
      benchmark:
        type: string
      created_at:
        type: string
      description:
        type: string
      display_config:
        type: string
      end_time:
        type: string
      engine_config:
        type: string
      fault_type:
        type: integer
      id:
        type: integer
      injection_name:
        type: string
      pre_duration:
        type: integer
      start_time:
        type: string
      status:
        type: integer
      task:
        allOf:
        - $ref: '#/definitions/dto.TaskV2Response'
        description: Optional relations
      task_id:
        type: string
      updated_at:
        type: string
    type: object
  dto.InjectionV2SearchReq:
    properties:
      benchmarks:
        items:
          type: string
        type: array
      created_at_gte:
        type: string
      created_at_lte:
        type: string
      end_time_gte:
        type: string
      end_time_lte:
        type: string
      fault_types:
        items:
          type: integer
        type: array
      include:
        type: string
      page:
        minimum: 1
        type: integer
      search:
        type: string
      size:
        maximum: 100
        minimum: 1
        type: integer
      sort_by:
        enum:
        - id
        - task_id
        - fault_type
        - status
        - benchmark
        - injection_name
        - created_at
        - updated_at
        type: string
      sort_order:
        enum:
        - asc
        - desc
        type: string
      start_time_gte:
        type: string
      start_time_lte:
        type: string
      statuses:
        items:
          type: integer
        type: array
      task_ids:
        items:
          type: string
        type: array
    type: object
  dto.InjectionV2UpdateReq:
    properties:
      benchmark:
        type: string
      description:
        type: string
      display_config:
        type: string
      end_time:
        type: string
      engine_config:
        type: string
      fault_type:
        type: integer
      injection_name:
        type: string
      pre_duration:
        type: integer
      start_time:
        type: string
      status:
        type: integer
      task_id:
        type: string
    type: object
  dto.LabelItem:
    properties:
      key:
        enum:
        - env
        - batch
        - tag
        type: string
      value:
        type: string
    required:
    - key
    - value
    type: object
  dto.ListInjectionsResp:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.InjectionItem'
        type: array
      total:
        type: integer
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      expires_at:
        example: "2024-12-31T23:59:59Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/dto.UserInfo'
    type: object
  dto.LogoutRequest:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - token
    type: object
  dto.MetricValue:
    properties:
      timestamp:
        example: "2024-01-01T12:00:00Z"
        type: string
      unit:
        example: percent
        type: string
      value:
        example: 42.5
        type: number
    type: object
  dto.MonitoringMetricsResponse:
    properties:
      labels:
        additionalProperties:
          type: string
        type: object
      metrics:
        additionalProperties:
          $ref: '#/definitions/dto.MetricValue'
        type: object
      timestamp:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
  dto.MonitoringQueryRequest:
    properties:
      end_time:
        example: "2024-01-01T23:59:59Z"
        type: string
      query:
        example: cpu_usage
        type: string
      start_time:
        example: "2024-01-01T00:00:00Z"
        type: string
      step:
        example: 1m
        type: string
    required:
    - query
    type: object
  dto.NsResourcesResp:
    additionalProperties:
      $ref: '#/definitions/handler.Resources'
    type: object
  dto.NumberRange:
    properties:
      max:
        type: number
      min:
        type: number
    type: object
  dto.PaginationInfo:
    properties:
      page:
        example: 1
        type: integer
      size:
        example: 20
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 5
        type: integer
    type: object
  dto.PaginationResp-dto_UnifiedTask:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.UnifiedTask'
        type: array
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  dto.PairStats:
    properties:
      inDegree:
        type: integer
      name:
        type: string
      outDegree:
        type: integer
    type: object
  dto.PermissionListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.PermissionResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.PermissionResponse:
    properties:
      action:
        example: read
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Permission to read dataset information
        type: string
      display_name:
        example: Read Datasets
        type: string
      id:
        example: 1
        type: integer
      is_system:
        example: false
        type: boolean
      name:
        example: read_datasets
        type: string
      resource:
        $ref: '#/definitions/dto.ResourceResponse'
      resource_id:
        example: 1
        type: integer
      roles:
        description: Roles that have this permission
        items:
          $ref: '#/definitions/dto.RoleResponse'
        type: array
      status:
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  dto.PermissionSearchRequest:
    properties:
      actions:
        description: Action filter
        items:
          type: string
        type: array
      created_at:
        allOf:
        - $ref: '#/definitions/dto.DateRange'
        description: Common filters shortcuts
      description_pattern:
        description: Fuzzy match for description
        type: string
      display_name_pattern:
        description: Fuzzy match for display name
        type: string
      exclude_fields:
        items:
          type: string
        type: array
      filters:
        description: Filters
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      include:
        description: Include related entities
        items:
          type: string
        type: array
      include_fields:
        description: Include/Exclude fields
        items:
          type: string
        type: array
      is_active:
        type: boolean
      is_system:
        description: Is system permission
        type: boolean
      keyword:
        description: Search keyword (for general text search)
        type: string
      name_pattern:
        description: Permission-specific filter shortcuts
        type: string
      page:
        description: Pagination
        minimum: 1
        type: integer
      project_id:
        type: integer
      resource_ids:
        description: Resource ID filter
        items:
          type: integer
        type: array
      resource_names:
        description: Resource name filter
        items:
          type: string
        type: array
      role_ids:
        description: Role IDs that have this permission
        items:
          type: integer
        type: array
      size:
        maximum: 1000
        minimum: 1
        type: integer
      sort:
        description: Sort
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      status:
        items:
          type: integer
        type: array
      updated_at:
        $ref: '#/definitions/dto.DateRange'
      user_id:
        type: integer
    type: object
  dto.ProjectResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      members:
        description: Related entities (only included when specifically requested)
        items:
          $ref: '#/definitions/dto.UserProjectResponse'
        type: array
      name:
        type: string
      status:
        type: integer
      updated_at:
        type: string
    type: object
  dto.ProjectStatistics:
    properties:
      active:
        example: 45
        type: integer
      inactive:
        example: 5
        type: integer
      new_today:
        example: 2
        type: integer
      total:
        example: 50
        type: integer
    type: object
  dto.QueryInjectionResp:
    properties:
      benchmark:
        description: Benchmark database, add index
        type: string
      created_at:
        description: Creation time, add time index
        type: string
      description:
        description: Description (optional field)
        type: string
      display_config:
        description: User-facing display configuration
        type: string
      end_time:
        description: Expected fault end time, add time index
        type: string
      engine_config:
        description: System-facing runtime configuration
        type: string
      fault_type:
        description: Fault type, add composite index
        type: integer
      ground_truth:
        $ref: '#/definitions/handler.Groundtruth'
      id:
        description: Unique identifier
        type: integer
      injection_name:
        description: Name injected in k8s resources
        type: string
      pre_duration:
        description: Normal data duration
        type: integer
      start_time:
        description: Expected fault start time, add time index
        type: string
      status:
        description: Status, add composite index
        type: integer
      task:
        allOf:
        - $ref: '#/definitions/database.Task'
        description: Foreign key association
      task_id:
        description: Associated task ID, add composite index
        type: string
      updated_at:
        description: Update time
        type: string
    type: object
  dto.RawDataItem:
    properties:
      algorithm:
        type: string
      dataset:
        type: string
      entries:
        items:
          $ref: '#/definitions/dto.GranularityRecord'
        type: array
      execution_id:
        type: integer
      groundtruth:
        $ref: '#/definitions/handler.Groundtruth'
    type: object
  dto.RawDataReq:
    properties:
      custom_end_time:
        type: string
      custom_start_time:
        type: string
      execution_ids:
        items:
          type: integer
        type: array
      lookback:
        type: string
      pairs:
        items:
          $ref: '#/definitions/dto.AlgorithmDatasetPair'
        type: array
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      full_name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      phone:
        example: "+1234567890"
        type: string
      username:
        example: newuser
        type: string
    required:
    - email
    - full_name
    - password
    - username
    type: object
  dto.RelationEntity:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: admin
        type: string
      type:
        example: user
        type: string
    type: object
  dto.RelationListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.RelationResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.RelationOperation:
    properties:
      action:
        enum:
        - assign
        - remove
        example: assign
        type: string
      source_id:
        example: 1
        type: integer
      target_id:
        example: 2
        type: integer
      type:
        example: user_role
        type: string
    required:
    - action
    - source_id
    - target_id
    - type
    type: object
  dto.RelationResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      source:
        $ref: '#/definitions/dto.RelationEntity'
      target:
        $ref: '#/definitions/dto.RelationEntity'
      type:
        example: user_role
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
    type: object
  dto.RelationStatisticsResponse:
    properties:
      container_labels:
        example: 150
        type: integer
      dataset_labels:
        example: 200
        type: integer
      fault_injection_labels:
        example: 120
        type: integer
      project_labels:
        example: 80
        type: integer
      role_permissions:
        example: 100
        type: integer
      user_permissions:
        example: 25
        type: integer
      user_projects:
        example: 75
        type: integer
      user_roles:
        example: 50
        type: integer
    type: object
  dto.RemovePermissionFromRoleRequest:
    type: object
  dto.RemoveRolePermissionRequest:
    type: object
  dto.RemoveUserPermissionRequest:
    properties:
      permission_id:
        example: 1
        type: integer
      project_id:
        example: 1
        type: integer
      user_id:
        example: 1
        type: integer
    required:
    - permission_id
    - user_id
    type: object
  dto.RemoveUserRoleRequest:
    properties:
      role_id:
        example: 2
        type: integer
      user_id:
        example: 1
        type: integer
    required:
    - role_id
    - user_id
    type: object
  dto.ResourceResponse:
    properties:
      category:
        example: data
        type: string
      display_name:
        example: Datasets
        type: string
      id:
        example: 1
        type: integer
      name:
        example: datasets
        type: string
      type:
        example: table
        type: string
    type: object
  dto.RetryPolicy:
    properties:
      backoff_sec:
        description: Seconds to wait between retries
        type: integer
      max_attempts:
        description: Maximum number of retry attempts
        type: integer
    type: object
  dto.RoleListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.RoleResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.RoleResponse:
    properties:
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      description:
        example: Role for data analysis operations
        type: string
      display_name:
        example: Data Analyst
        type: string
      id:
        example: 1
        type: integer
      is_system:
        example: false
        type: boolean
      name:
        example: data_analyst
        type: string
      permissions:
        items:
          $ref: '#/definitions/dto.PermissionResponse'
        type: array
      status:
        example: 1
        type: integer
      type:
        example: custom
        type: string
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      user_count:
        example: 5
        type: integer
    type: object
  dto.RoleSearchRequest:
    properties:
      created_at:
        allOf:
        - $ref: '#/definitions/dto.DateRange'
        description: Common filters shortcuts
      description_pattern:
        description: Description fuzzy match
        type: string
      display_name_pattern:
        description: Display name fuzzy match
        type: string
      exclude_fields:
        items:
          type: string
        type: array
      filters:
        description: Filters
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      include:
        description: Include related entities
        items:
          type: string
        type: array
      include_fields:
        description: Include/Exclude fields
        items:
          type: string
        type: array
      is_active:
        type: boolean
      is_system:
        description: Whether system role
        type: boolean
      keyword:
        description: Search keyword (for general text search)
        type: string
      name_pattern:
        description: Role-specific filter shortcuts
        type: string
      page:
        description: Pagination
        minimum: 1
        type: integer
      permission_ids:
        description: Permission ID filter
        items:
          type: integer
        type: array
      project_id:
        type: integer
      size:
        maximum: 1000
        minimum: 1
        type: integer
      sort:
        description: Sort
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      status:
        items:
          type: integer
        type: array
      types:
        description: Role type filter
        items:
          type: string
        type: array
      updated_at:
        $ref: '#/definitions/dto.DateRange'
      user_count:
        allOf:
        - $ref: '#/definitions/dto.NumberRange'
        description: User count range
      user_id:
        type: integer
    type: object
  dto.SearchFilter:
    properties:
      field:
        description: Field name
        type: string
      operator:
        allOf:
        - $ref: '#/definitions/dto.FilterOperator'
        description: Operator
      value:
        description: Value
      values:
        description: Multiple values (for IN operations etc.)
        items: {}
        type: array
    required:
    - field
    - operator
    type: object
  dto.SearchResponse-dto_AlgorithmResponse:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      applied_sort:
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      items:
        items:
          $ref: '#/definitions/dto.AlgorithmResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.SearchResponse-dto_ContainerResponse:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      applied_sort:
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      items:
        items:
          $ref: '#/definitions/dto.ContainerResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.SearchResponse-dto_DatasetV2Response:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      applied_sort:
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      items:
        items:
          $ref: '#/definitions/dto.DatasetV2Response'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.SearchResponse-dto_InjectionV2Response:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      applied_sort:
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      items:
        items:
          $ref: '#/definitions/dto.InjectionV2Response'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.SearchResponse-dto_PermissionResponse:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      applied_sort:
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      items:
        items:
          $ref: '#/definitions/dto.PermissionResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.SearchResponse-dto_RoleResponse:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      applied_sort:
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      items:
        items:
          $ref: '#/definitions/dto.RoleResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.SearchResponse-dto_TaskResponse:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      applied_sort:
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      items:
        items:
          $ref: '#/definitions/dto.TaskResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.SearchResponse-dto_UserResponse:
    properties:
      applied_filters:
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      applied_sort:
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      items:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.ServiceCoverageItem:
    properties:
      coverage:
        type: number
      notCovered:
        items:
          type: string
        type: array
      num:
        type: integer
    type: object
  dto.ServiceInfo:
    properties:
      details: {}
      error:
        type: string
      last_checked:
        example: "2024-01-01T12:00:00Z"
        type: string
      response_time:
        example: 15ms
        type: string
      status:
        example: healthy
        type: string
    type: object
  dto.SizeRangeFilter:
    properties:
      max_size:
        description: Maximum size (bytes)
        type: integer
      min_size:
        description: Minimum size (bytes)
        type: integer
    type: object
  dto.SortDirection:
    enum:
    - asc
    - desc
    type: string
    x-enum-varnames:
    - SortASC
    - SortDESC
  dto.SortOption:
    properties:
      direction:
        allOf:
        - $ref: '#/definitions/dto.SortDirection'
        description: Sort direction
      field:
        description: Sort field
        type: string
    required:
    - direction
    - field
    type: object
  dto.SubmitDatasetBuildingReq:
    properties:
      payloads:
        items:
          $ref: '#/definitions/dto.DatasetBuildPayload'
        type: array
      project_name:
        type: string
    required:
    - payloads
    - project_name
    type: object
  dto.SubmitExecutionReq:
    properties:
      payloads:
        items:
          $ref: '#/definitions/dto.ExecutionPayload'
        type: array
      project_name:
        type: string
    required:
    - payloads
    - project_name
    type: object
  dto.SubmitInjectionReq:
    properties:
      algorithms:
        items:
          $ref: '#/definitions/dto.AlgorithmItem'
        type: array
      benchmark:
        type: string
      interval:
        minimum: 1
        type: integer
      labels:
        items:
          $ref: '#/definitions/dto.LabelItem'
        type: array
      pre_duration:
        minimum: 1
        type: integer
      project_name:
        type: string
      specs:
        items:
          $ref: '#/definitions/handler.Node'
        type: array
    required:
    - benchmark
    - interval
    - pre_duration
    - project_name
    - specs
    type: object
  dto.SubmitInjectionResp:
    properties:
      duplicated_count:
        type: integer
      group_id:
        type: string
      original_count:
        type: integer
      traces:
        items:
          $ref: '#/definitions/dto.Trace'
        type: array
    type: object
  dto.SubmitResp:
    properties:
      group_id:
        type: string
      traces:
        items:
          $ref: '#/definitions/dto.Trace'
        type: array
    type: object
  dto.SuccessfulExecutionItem:
    properties:
      algorithm:
        description: Algorithm name
        type: string
      created_at:
        description: Creation time
        type: string
      dataset:
        description: Dataset name
        type: string
      id:
        description: Execution ID
        type: integer
    type: object
  dto.SystemInfo:
    properties:
      cpu_usage:
        example: 25.5
        type: number
      disk_usage:
        example: 45.8
        type: number
      load_average:
        example: 1.2, 1.5, 1.8
        type: string
      memory_usage:
        example: 60.2
        type: number
    type: object
  dto.SystemStatisticsResponse:
    properties:
      containers:
        $ref: '#/definitions/dto.ContainerStatistics'
      datasets:
        $ref: '#/definitions/dto.DatasetStatistics'
      executions:
        $ref: '#/definitions/dto.ExecutionStatistics'
      generated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      injections:
        $ref: '#/definitions/dto.InjectionStatistics'
      projects:
        $ref: '#/definitions/dto.ProjectStatistics'
      tasks:
        $ref: '#/definitions/dto.TaskStatistics'
      users:
        $ref: '#/definitions/dto.UserStatistics'
    type: object
  dto.TaskDetailResp:
    properties:
      logs:
        items:
          type: string
        type: array
      task:
        $ref: '#/definitions/dto.TaskItem'
    type: object
  dto.TaskDetailResponse:
    properties:
      created_at:
        type: string
      group_id:
        type: string
      id:
        type: string
      immediate:
        type: boolean
      logs:
        items:
          type: string
        type: array
      project:
        allOf:
        - $ref: '#/definitions/dto.ProjectResponse'
        description: Related entities (only included when specifically requested)
      project_id:
        type: integer
      status:
        type: string
      trace_id:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.TaskItem:
    properties:
      created_at:
        type: string
      id:
        type: string
      payload:
        type: object
      status:
        type: string
      trace_id:
        type: string
      type:
        type: string
    type: object
  dto.TaskResponse:
    properties:
      created_at:
        type: string
      group_id:
        type: string
      id:
        type: string
      immediate:
        type: boolean
      logs:
        description: Only included when specifically requested
        items:
          type: string
        type: array
      project:
        allOf:
        - $ref: '#/definitions/dto.ProjectResponse'
        description: Related entities (only included when specifically requested)
      project_id:
        type: integer
      status:
        type: string
      trace_id:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.TaskSearchRequest:
    properties:
      created_at:
        allOf:
        - $ref: '#/definitions/dto.DateRange'
        description: Common filters shortcuts
      exclude_fields:
        items:
          type: string
        type: array
      filters:
        description: Filters
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      group_id:
        type: string
      immediate:
        type: boolean
      include:
        description: Include related entities
        items:
          type: string
        type: array
      include_fields:
        description: Include/Exclude fields
        items:
          type: string
        type: array
      is_active:
        type: boolean
      keyword:
        description: Search keyword (for general text search)
        type: string
      page:
        description: Pagination
        minimum: 1
        type: integer
      project_id:
        type: integer
      size:
        maximum: 1000
        minimum: 1
        type: integer
      sort:
        description: Sort
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      status:
        type: string
      task_id:
        description: Task-specific filters
        type: string
      task_type:
        type: string
      trace_id:
        type: string
      updated_at:
        $ref: '#/definitions/dto.DateRange'
      user_id:
        type: integer
    type: object
  dto.TaskStatistics:
    properties:
      completed:
        example: 900
        type: integer
      failed:
        example: 30
        type: integer
      pending:
        example: 50
        type: integer
      running:
        example: 20
        type: integer
      total:
        example: 1000
        type: integer
    type: object
  dto.TaskV2Response:
    properties:
      created_at:
        type: string
      id:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  dto.TokenRefreshRequest:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - token
    type: object
  dto.TokenRefreshResponse:
    properties:
      expires_at:
        example: "2024-12-31T23:59:59Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  dto.Trace:
    properties:
      head_task_id:
        type: string
      index:
        type: integer
      trace_id:
        type: string
    type: object
  dto.TraceStats:
    properties:
      avg_duration:
        type: number
      end_count_map:
        additionalProperties:
          additionalProperties:
            type: integer
          type: object
        type: object
      fault_injection_traces:
        items:
          type: string
        type: array
      max_duration:
        type: number
      min_duration:
        type: number
      total:
        type: integer
      trace_completed_list:
        items:
          type: string
        type: array
      trace_errors: {}
      trace_status_time_map:
        additionalProperties:
          additionalProperties:
            type: number
          type: object
        type: object
    type: object
  dto.UnifiedTask:
    properties:
      cron_expr:
        description: Cron expression for recurring tasks
        type: string
      execute_time:
        description: Unix timestamp for delayed execution
        type: integer
      group_carrier:
        allOf:
        - $ref: '#/definitions/propagation.MapCarrier'
        description: Carrier for group context
      group_id:
        description: ID for grouping tasks
        type: string
      immediate:
        description: Whether to execute immediately
        type: boolean
      payload:
        description: Task-specific data
        type: object
      project_id:
        description: ID for the project (optional)
        type: integer
      restart_num:
        description: Number of restarts for the task
        type: integer
      retry_policy:
        allOf:
        - $ref: '#/definitions/dto.RetryPolicy'
        description: Policy for retrying failed tasks
      status:
        description: Status of the task
        type: string
      task_id:
        description: Unique identifier for the task
        type: string
      trace_carrier:
        allOf:
        - $ref: '#/definitions/propagation.MapCarrier'
        description: Carrier for trace context
      trace_id:
        description: ID for tracing related tasks
        type: string
      type:
        allOf:
        - $ref: '#/definitions/consts.TaskType'
        description: Task type (determines how it's processed)
    type: object
  dto.UpdateContainerRequest:
    description: Request structure for updating container information
    properties:
      command:
        description: '@Description Container startup command (optional)'
        type: string
      env_vars:
        description: '@Description Environment variables (optional)'
        type: string
      image:
        description: '@Description Docker image name (optional)'
        type: string
      is_public:
        description: '@Description Whether the container is public (optional)'
        type: boolean
      name:
        description: '@Description Container name (optional)'
        type: string
      status:
        description: '@Description Container status (optional)'
        type: boolean
      tag:
        description: '@Description Docker image tag (optional)'
        type: string
      type:
        description: '@Description Container type (optional)'
        enum:
        - algorithm
        - benchmark
        type: string
    type: object
  dto.UpdatePermissionRequest:
    properties:
      action:
        example: read
        type: string
      description:
        example: Updated permission description
        type: string
      display_name:
        example: Read All Datasets
        type: string
      resource_id:
        example: 2
        type: integer
      status:
        example: 1
        type: integer
    type: object
  dto.UpdateRoleRequest:
    properties:
      description:
        example: Updated role description
        type: string
      display_name:
        example: Senior Data Analyst
        type: string
      status:
        example: 1
        type: integer
    type: object
  dto.UpdateUserRequest:
    properties:
      avatar:
        example: https://example.com/new-avatar.jpg
        type: string
      email:
        example: newemail@example.com
        type: string
      full_name:
        example: Jane Doe
        type: string
      is_active:
        example: true
        type: boolean
      phone:
        example: "+0987654321"
        type: string
      status:
        example: 1
        type: integer
    type: object
  dto.UserInfo:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: admin@example.com
        type: string
      full_name:
        example: Administrator
        type: string
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      phone:
        example: "+1234567890"
        type: string
      status:
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      username:
        example: admin
        type: string
    type: object
  dto.UserListResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationInfo'
    type: object
  dto.UserProjectResponse:
    properties:
      joined_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      project_id:
        example: 1
        type: integer
      project_name:
        example: Project Alpha
        type: string
      role:
        $ref: '#/definitions/dto.RoleResponse'
      status:
        example: 1
        type: integer
    type: object
  dto.UserResponse:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      email:
        example: admin@example.com
        type: string
      full_name:
        example: Administrator
        type: string
      global_roles:
        items:
          $ref: '#/definitions/dto.RoleResponse'
        type: array
      id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      last_login_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      permissions:
        items:
          $ref: '#/definitions/dto.PermissionResponse'
        type: array
      phone:
        example: "+1234567890"
        type: string
      project_roles:
        items:
          $ref: '#/definitions/dto.UserProjectResponse'
        type: array
      status:
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T00:00:00Z"
        type: string
      username:
        example: admin
        type: string
    type: object
  dto.UserSearchRequest:
    properties:
      created_at:
        allOf:
        - $ref: '#/definitions/dto.DateRange'
        description: Common filters shortcuts
      departments:
        description: Department filter
        items:
          type: string
        type: array
      email_pattern:
        description: Email fuzzy match
        type: string
      exclude_fields:
        items:
          type: string
        type: array
      filters:
        description: Filters
        items:
          $ref: '#/definitions/dto.SearchFilter'
        type: array
      fullname_pattern:
        description: Full name fuzzy match
        type: string
      include:
        description: Include related entities
        items:
          type: string
        type: array
      include_fields:
        description: Include/Exclude fields
        items:
          type: string
        type: array
      is_active:
        type: boolean
      keyword:
        description: Search keyword (for general text search)
        type: string
      last_login_range:
        allOf:
        - $ref: '#/definitions/dto.DateRange'
        description: Last login time range
      page:
        description: Pagination
        minimum: 1
        type: integer
      project_id:
        type: integer
      project_ids:
        description: Project ID filter
        items:
          type: integer
        type: array
      role_ids:
        description: Role ID filter
        items:
          type: integer
        type: array
      size:
        maximum: 1000
        minimum: 1
        type: integer
      sort:
        description: Sort
        items:
          $ref: '#/definitions/dto.SortOption'
        type: array
      status:
        items:
          type: integer
        type: array
      updated_at:
        $ref: '#/definitions/dto.DateRange'
      user_id:
        type: integer
      username_pattern:
        description: User-specific filter shortcuts
        type: string
    type: object
  dto.UserStatistics:
    properties:
      active:
        example: 120
        type: integer
      inactive:
        example: 30
        type: integer
      new_this_week:
        example: 20
        type: integer
      new_today:
        example: 5
        type: integer
      total:
        example: 150
        type: integer
    type: object
  handler.Groundtruth:
    properties:
      container:
        items:
          type: string
        type: array
      function:
        items:
          type: string
        type: array
      metric:
        items:
          type: string
        type: array
      pod:
        items:
          type: string
        type: array
      service:
        items:
          type: string
        type: array
      span:
        items:
          type: string
        type: array
    type: object
  handler.Node:
    properties:
      children:
        additionalProperties:
          $ref: '#/definitions/handler.Node'
        type: object
      description:
        type: string
      name:
        type: string
      range:
        items:
          type: integer
        type: array
      value:
        type: integer
    type: object
  handler.Pair:
    properties:
      source:
        type: string
      target:
        type: string
    type: object
  handler.Resources:
    properties:
      app_labels:
        items:
          type: string
        type: array
      container_names:
        items:
          type: string
        type: array
      database_app_names:
        items:
          type: string
        type: array
      dns_app_names:
        items:
          type: string
        type: array
      http_app_names:
        items:
          type: string
        type: array
      jvm_app_names:
        items:
          type: string
        type: array
      network_pairs:
        items:
          $ref: '#/definitions/handler.Pair'
        type: array
    type: object
  propagation.MapCarrier:
    additionalProperties:
      type: string
    type: object
host: localhost:8080
info:
  contact:
    email: team@rcabench.com
    name: RCABench Team
  description: |-
    RCABench - A comprehensive root cause analysis benchmarking platform for microservices
    This API provides endpoints for managing datasets, algorithms, evaluations, and fault injections
    for root cause analysis in distributed systems and microservices architectures.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: RCABench API
  version: 1.0.1
paths:
  /api/v1/algorithms:
    get:
      description: Get all available algorithms in the system, including image info,
        tags, and update time. Only returns containers with active status.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned algorithm list
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_ListAlgorithmsResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get algorithm list
      tags:
      - algorithm
    post:
      description: Batch submit algorithm execution tasks, supporting multiple algorithm
        and dataset combinations. The system assigns a unique TraceID for each execution
        task to track status and results.
      parameters:
      - description: Algorithm execution request list, including algorithm name, dataset,
          and environment variables
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.SubmitExecutionReq'
      produces:
      - application/json
      responses:
        "202":
          description: Successfully submitted algorithm execution task, returns task
            tracking info
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SubmitResp'
        "400":
          description: Request parameter error, such as invalid JSON format, algorithm
            name or dataset name, unsupported environment variable name, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Submit algorithm execution task
      tags:
      - algorithm
  /api/v1/analyzers/injections:
    get:
      description: Analyze fault injection data using various filtering conditions,
        returning statistical information including efficiency, diversity, distance
        between seeds, etc.
      parameters:
      - description: Project name filter
        in: query
        name: project_name
        type: string
      - default: prod
        description: Environment label filter
        enum:
        - dev
        - prod
        in: query
        name: env
        type: string
      - description: Batch label filter
        in: query
        name: batch
        type: string
      - default: train
        description: Classification label filter
        enum:
        - train
        - test
        in: query
        name: tag
        type: string
      - default: clickhouse
        description: Benchmark type filter
        enum:
        - clickhouse
        in: query
        name: benchmark
        type: string
      - default: 0
        description: Status filter, refer to field mapping interface (/mapping) for
          specific values
        in: query
        name: status
        type: integer
      - default: 0
        description: Fault type filter, refer to field mapping interface (/mapping)
          for specific values
        in: query
        name: fault_type
        type: integer
      - description: Time range query, supports custom relative time (1h/24h/7d) or
          custom, default is not set
        in: query
        name: lookback
        type: string
      - description: Custom start time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_start_time
        type: string
      - description: Custom end time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns fault injection analysis statistics
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_AnalyzeInjectionsResp'
        "400":
          description: Request parameter error, such as incorrect parameter format,
            validation failure, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Analyze fault injection data
      tags:
      - analyzer
  /api/v1/analyzers/traces:
    get:
      description: Analyze trace data using various filtering conditions, returning
        statistical information including traces ending with fault injection
      parameters:
      - description: First task type filter
        in: query
        name: first_task_type
        type: string
      - description: Time range query, supports custom relative time (1h/24h/7d) or
          custom, default is not set
        in: query
        name: lookback
        type: string
      - description: Custom start time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_start_time
        type: string
      - description: Custom end time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns trace analysis statistics
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_TraceStats'
        "400":
          description: Request parameter error, such as incorrect parameter format,
            validation failure, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Analyze trace data
      tags:
      - trace
  /api/v1/containers:
    post:
      consumes:
      - multipart/form-data
      description: Build Docker images by uploading files, specifying GitHub repositories,
        or Harbor images. Supports zip and tar.gz file uploads, or automatically pulls
        code from GitHub for building, or directly updates the database from existing
        Harbor images. The system automatically validates required files (Dockerfile)
        and sets execution permissions.
      parameters:
      - default: algorithm
        description: Container type, specifies the purpose of the container
        enum:
        - algorithm
        - benchmark
        in: formData
        name: type
        type: string
      - description: Container name, used to identify the container, will be used
          as the image build identifier, defaults to the name field in info.toml
        in: formData
        name: name
        type: string
      - description: 'Docker image name. When source_type is harbor, specify the existing
          image name in Harbor; otherwise, supports the following formats: 1) image-name
          (automatically adds default Harbor address and namespace) 2) namespace/image-name
          (automatically adds default Harbor address)'
        in: formData
        name: image
        required: true
        type: string
      - default: latest
        description: Docker image tag. When source_type is harbor, specify the existing
          image tag in Harbor; otherwise, used for version control
        in: formData
        name: tag
        type: string
      - default: bash /entrypoint.sh
        description: Docker image startup command, defaults to bash /entrypoint.sh
        in: formData
        name: command
        type: string
      - collectionFormat: csv
        description: List of environment variable names, supports multiple variables
        in: formData
        items:
          type: string
        name: env_vars
        type: array
      - default: file
        description: Build source type, specifies the source of the code
        enum:
        - file
        - github
        - harbor
        in: formData
        name: source_type
        type: string
      - description: Source file (supports zip or tar.gz format), required when source_type
          is file, file size limit 5MB
        in: formData
        name: file
        type: file
      - description: GitHub access token, used for private repositories, not required
          for public repositories
        in: formData
        name: github_token
        type: string
      - description: 'GitHub repository address, format: owner/repo, required when
          source_type is github'
        in: formData
        name: github_repo
        type: string
      - default: main
        description: GitHub branch name, specifies the branch to build
        in: formData
        name: github_branch
        type: string
      - description: GitHub commit hash (supports short hash), if specified, branch
          parameter is ignored
        in: formData
        name: github_commit
        type: string
      - default: .
        description: Subdirectory path in the repository, if the source code is not
          in the root directory
        in: formData
        name: github_path
        type: string
      - default: .
        description: Docker build context path, relative to the source root directory
        in: formData
        name: context_dir
        type: string
      - default: Dockerfile
        description: Dockerfile path, relative to the source root directory
        in: formData
        name: dockerfile_path
        type: string
      - description: Dockerfile build target (used for multi-stage builds)
        in: formData
        name: target
        type: string
      - default: false
        description: Whether to force rebuild the image, ignore cache
        in: formData
        name: force_rebuild
        type: boolean
      produces:
      - application/json
      responses:
        "202":
          description: Successfully submitted container build task, returns task tracking
            information
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SubmitResp'
        "400":
          description: 'Request parameter error: unsupported file format (only zip,
            tar.gz), file size exceeds limit (5MB), parameter validation failed, invalid
            GitHub repository address, invalid Harbor image parameter, invalid force_rebuild
            value, etc.'
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: 'Resource not found: build context path does not exist, missing
            required files (Dockerfile, entrypoint.sh), image not found in Harbor'
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Submit container build task
      tags:
      - container
  /api/v1/datasets:
    delete:
      description: Delete dataset data
      parameters:
      - collectionFormat: csv
        description: Dataset name list
        in: query
        items:
          type: string
        name: names
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_DatasetDeleteResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Delete dataset data
      tags:
      - dataset
    post:
      consumes:
      - application/json
      description: Batch build datasets based on specified time range and benchmark
        container
      parameters:
      - description: List of dataset build requests; each request includes dataset
          name, time range, benchmark, and environment variable configuration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.SubmitDatasetBuildingReq'
      produces:
      - application/json
      responses:
        "202":
          description: Successfully submitted dataset building tasks; returns group
            ID and trace information list
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SubmitResp'
        "400":
          description: 'Bad request parameters: 1) Invalid JSON format 2) Empty dataset
            name 3) Invalid time range 4) Benchmark does not exist 5) Unsupported
            environment variable name'
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Batch build datasets
      tags:
      - dataset
  /api/v1/datasets/download:
    get:
      description: 'Package specified datasets into a ZIP file for download, automatically
        excluding result.csv and detector conclusion files. Supports downloading by
        group ID or dataset name (mutually exclusive). Directory structure: when downloading
        by group ID: datasets/{groupId}/{datasetName}/...; when by name: datasets/{datasetName}/...'
      parameters:
      - collectionFormat: csv
        description: 'List of task group IDs, format: group1,group2,group3. Mutually
          exclusive with names parameter; group_ids takes precedence'
        in: query
        items:
          type: string
        name: group_ids
        type: array
      - collectionFormat: csv
        description: 'List of dataset names, format: dataset1,dataset2,dataset3. Mutually
          exclusive with group_ids parameter'
        in: query
        items:
          type: string
        name: names
        type: array
      produces:
      - application/zip
      responses:
        "200":
          description: ZIP file stream; the Content-Disposition header contains filename
            datasets.zip
          schema:
            type: string
        "400":
          description: 'Bad request parameters: 1) Parameter binding failed 2) Both
            parameters are empty 3) Both parameters provided'
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: 'Permission error: requested dataset path is not within allowed
            scope'
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Download dataset archive file
      tags:
      - dataset
  /api/v1/debug/ns/status:
    get:
      description: Get namespace lock status information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get namespace lock status
      tags:
      - debug
  /api/v1/evaluations/executions:
    get:
      description: Get all records in ExecutionResult with status ExecutionSuccess,
        supports time range filtering and quantity filtering
      parameters:
      - description: 'Start time, format: 2006-01-02T15:04:05Z07:00'
        in: query
        name: start_time
        type: string
      - description: 'End time, format: 2006-01-02T15:04:05Z07:00'
        in: query
        name: end_time
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returns the list of successful algorithm execution
            records
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SuccessfulExecutionsResp'
        "400":
          description: Request parameter error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get successful algorithm execution records
      tags:
      - evaluation
  /api/v1/evaluations/groundtruth:
    post:
      description: Get ground truth data for the given dataset array, used as benchmark
        data for algorithm evaluation. Supports batch query for ground truth information
        of multiple datasets
      parameters:
      - description: Ground truth query request, contains dataset list
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.GroundTruthReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returns ground truth information for datasets
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_GroundTruthResp'
        "400":
          description: Request parameter error, such as incorrect JSON format or empty
            dataset array
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get ground truth for datasets
      tags:
      - evaluation
  /api/v1/evaluations/raw-data:
    post:
      description: 'Supports three query modes: 1) Directly pass an array of algorithm-dataset
        pairs for precise query; 2) Pass lists of algorithms and datasets for Cartesian
        product query; 3) Query by execution ID list. The three modes are mutually
        exclusive, only one can be selected'
      parameters:
      - description: 'Raw data query request, supports three modes: pairs array, (algorithms+datasets)
          Cartesian product, or execution_ids list'
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.RawDataReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returns the list of raw evaluation data
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_RawDataResp'
        "400":
          description: Request parameter error, such as incorrect JSON format, query
            mode conflict or empty parameter
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get raw evaluation data
      tags:
      - evaluation
  /api/v1/injections:
    get:
      description: Fault injection record query interface supporting sorting and filtering.
        Returns the original database record list without data conversion.
      parameters:
      - description: Project name filter
        in: query
        name: project_name
        type: string
      - default: prod
        description: Environment label filter
        enum:
        - dev
        - prod
        in: query
        name: env
        type: string
      - description: Batch label filter
        in: query
        name: batch
        type: string
      - default: train
        description: Category label filter
        enum:
        - train
        - test
        in: query
        name: tag
        type: string
      - default: clickhouse
        description: Benchmark type filter
        enum:
        - clickhouse
        in: query
        name: benchmark
        type: string
      - default: 0
        description: Status filter, refer to field mapping interface (/mapping) for
          specific values
        in: query
        name: status
        type: integer
      - default: 0
        description: Fault type filter, refer to field mapping interface (/mapping)
          for specific values
        in: query
        name: fault_type
        type: integer
      - default: created_at
        description: Sort field, default created_at
        in: query
        name: sort_field
        type: string
      - default: desc
        description: Sort order, default desc
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      - default: 0
        description: Result quantity limit, used to control the number of returned
          records
        in: query
        minimum: 0
        name: limit
        type: integer
      - default: 0
        description: Pagination query, page number
        in: query
        minimum: 0
        name: page_num
        type: integer
      - default: 0
        description: Pagination query, records per page
        in: query
        minimum: 0
        name: page_size
        type: integer
      - description: Time range query, supports custom relative time (1h/24h/7d) or
          custom, default not set
        in: query
        name: lookback
        type: string
      - description: Custom start time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_start_time
        type: string
      - description: Custom end time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned fault injection record list
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_ListInjectionsResp'
        "400":
          description: Request parameter error, such as incorrect parameter format,
            validation failure, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get Fault Injection Record List
      tags:
      - injection
    post:
      description: Submit fault injection task, supporting batch submission of multiple
        fault configurations, the system will automatically deduplicate and return
        submission results
      parameters:
      - description: Fault injection request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.SubmitInjectionReq'
      produces:
      - application/json
      responses:
        "202":
          description: Successfully submitted fault injection task
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SubmitInjectionResp'
        "400":
          description: Request parameter error, such as incorrect JSON format, parameter
            validation failure, or invalid algorithm, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Submit Fault Injection Task
      tags:
      - injection
  /api/v1/injections/{task_id}/cancel:
    put:
      description: Cancel the specified fault injection task
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_InjectCancelResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Cancel Fault Injection Task
      tags:
      - injection
  /api/v1/injections/analysis/no-issues:
    get:
      description: Query all fault injection records without issues based on time
        range, returning detailed records including configuration information
      parameters:
      - description: Environment label filter
        in: query
        name: env
        type: string
      - description: Batch label filter
        in: query
        name: batch
        type: string
      - description: Time range query, supports custom relative time (1h/24h/7d) or
          custom, default not set
        in: query
        name: lookback
        type: string
      - description: Custom start time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_start_time
        type: string
      - description: Custom end time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned fault injection records without issues
          schema:
            $ref: '#/definitions/dto.GenericResponse-array_dto_FaultInjectionNoIssuesResp'
        "400":
          description: Request parameter error, such as incorrect time format or parameter
            validation failure, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Query Fault Injection Records Without Issues
      tags:
      - injection
  /api/v1/injections/analysis/stats:
    get:
      description: Get statistical information of fault injection records, including
        counts of records with issues, without issues, and total records
      parameters:
      - description: Time range query, supports custom relative time (1h/24h/7d) or
          custom, default not set
        in: query
        name: lookback
        type: string
      - description: Custom start time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_start_time
        type: string
      - description: Custom end time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned fault injection statistics
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_InjectionStatsResp'
        "400":
          description: Request parameter error, such as incorrect time format or parameter
            validation failure, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get Fault Injection Statistics
      tags:
      - injection
  /api/v1/injections/analysis/with-issues:
    get:
      description: Query all fault injection records with issues based on time range
      parameters:
      - description: Environment label filter
        in: query
        name: env
        type: string
      - description: Batch label filter
        in: query
        name: batch
        type: string
      - description: Time range query, supports custom relative time (1h/24h/7d) or
          custom, default not set
        in: query
        name: lookback
        type: string
      - description: Custom start time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_start_time
        type: string
      - description: Custom end time, RFC3339 format, required when lookback=custom
        format: date-time
        in: query
        name: custom_end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenericResponse-array_dto_FaultInjectionWithIssuesResp'
        "400":
          description: Request parameter error, such as incorrect time format or parameter
            validation failure, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Query Fault Injection Records With Issues
      tags:
      - injection
  /api/v1/injections/conf:
    get:
      description: Get fault injection configuration for the specified namespace,
        supporting different display modes for configuration tree structure
      parameters:
      - description: Namespace, specifies the namespace to get configuration for
        in: query
        name: namespace
        required: true
        type: string
      - default: engine
        description: Display mode
        enum:
        - display
        - engine
        in: query
        name: mode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned configuration tree structure
          schema:
            $ref: '#/definitions/dto.GenericResponse-handler_Node'
        "400":
          description: Request parameter error, such as missing namespace or mode
            parameter
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get Fault Injection Configuration
      tags:
      - injection
  /api/v1/injections/configs:
    get:
      description: Get fault injection configuration information based on multiple
        TraceIDs, used to view configuration details of submitted fault injection
        tasks
      parameters:
      - collectionFormat: multi
        description: TraceID list, supports multiple values, used to query corresponding
          configuration information
        in: query
        items:
          type: string
        name: trace_ids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned configuration list
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Request parameter error, such as missing TraceID parameter
            or incorrect format
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get Injected Fault Configuration List
      tags:
      - injection
  /api/v1/injections/mapping:
    get:
      description: Get string-to-number mapping relationships for status and fault
        types, used for frontend display and API parameter validation
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned field mapping relationships
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_InjectionFieldMappingResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get Field Mapping
      tags:
      - injection
  /api/v1/injections/ns-resources:
    get:
      description: Get mapping of all namespaces and their corresponding resource
        information, or query resource information for a specific namespace. Returns
        a mapping table from namespace to resources, used for fault injection configuration
        and resource management
      parameters:
      - description: Namespace name, returns resource mappings for all namespaces
          if not specified
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns resource information for the specified namespace when
            a namespace is provided
          schema:
            $ref: '#/definitions/dto.GenericResponse-handler_Resources'
        "404":
          description: The specified namespace does not exist
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error, unable to get resource mapping
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get Namespace Resource Mapping
      tags:
      - injection
  /api/v1/injections/query:
    get:
      description: Query fault injection record details by name or task ID, at least
        one of the two parameters must be provided
      parameters:
      - description: Fault injection name
        in: query
        name: name
        type: string
      - description: Task ID
        in: query
        name: task_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned fault injection record details
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_QueryInjectionResp'
        "400":
          description: Request parameter error, such as missing parameters, incorrect
            format, or validation failure, etc.
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Query Single Fault Injection Record
      tags:
      - injection
  /api/v1/tasks:
    get:
      description: Paginate and get task list by multiple conditions. Supports exact
        query by task ID, trace ID, group ID, or filter by type, status, etc.
      parameters:
      - description: Task ID - exact match (mutually exclusive with trace_id, group_id)
        in: query
        name: task_id
        type: string
      - description: Trace ID - find all tasks in the same trace (mutually exclusive
          with task_id, group_id)
        in: query
        name: trace_id
        type: string
      - description: Group ID - find all tasks in the same group (mutually exclusive
          with task_id, trace_id)
        in: query
        name: group_id
        type: string
      - description: Task type filter
        enum:
        - RestartService
        - FaultInjection
        - BuildDataset
        - RunAlgorithm
        - CollectResult
        - BuildImage
        in: query
        name: task_type
        type: string
      - description: Task status filter
        enum:
        - Pending
        - Running
        - Completed
        - Error
        - Cancelled
        - Scheduled
        - Rescheduled
        in: query
        name: status
        type: string
      - description: 'Immediate execution - true: immediate, false: delayed'
        in: query
        name: immediate
        type: boolean
      - default: created_at
        description: Sort field, default created_at
        in: query
        name: sort_field
        type: string
      - default: desc
        description: Sort order, default desc
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      - description: Result limit, controls number of records returned
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Time range query, supports relative time (1h/24h/7d) or custom,
          default unset
        in: query
        name: lookback
        type: string
      - description: Custom start time, RFC3339 format, required if lookback=custom
        format: date-time
        in: query
        name: custom_start_time
        type: string
      - description: Custom end time, RFC3339 format, required if lookback=custom
        format: date-time
        in: query
        name: custom_end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned fault injection record list
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_ListTasksResp'
        "400":
          description: Request parameter error, e.g. invalid format or validation
            failed
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get task list
      tags:
      - task
  /api/v1/tasks/{task_id}:
    get:
      description: Get detailed information of a task by task ID, including basic
        info and execution logs
      parameters:
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_TaskDetailResp'
        "400":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get task detail
      tags:
      - task
  /api/v1/tasks/queue:
    get:
      description: Paginate and get the list of tasks waiting in the queue
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page_num
        type: integer
      - default: 10
        description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_PaginationResp-dto_UnifiedTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get queued tasks
      tags:
      - task
  /api/v1/traces/completed:
    get:
      description: Get completed traces within a specified time range
      parameters:
      - description: Relative time query, e.g. 1h, 24h, 7d or custom
        in: query
        name: lookback
        type: string
      - description: Required when lookback=custom, custom start time (RFC3339 format)
        in: query
        name: custom_start_time
        type: string
      - description: Required when lookback=custom, custom end time (RFC3339 format)
        in: query
        name: custom_end_time
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_GetCompletedMapResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get completed traces
      tags:
      - trace
  /api/v2/algorithms:
    get:
      description: Get a simple list of all active algorithms without complex filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Algorithms retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_AlgorithmResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List algorithms
      tags:
      - Algorithms
  /api/v2/algorithms/{algorithm_id}/executions/{execution_id}/detectors:
    post:
      consumes:
      - application/json
      description: Upload detection results for detector algorithms via API instead
        of file collection
      parameters:
      - description: Algorithm ID
        in: path
        name: algorithm_id
        required: true
        type: integer
      - description: Execution ID
        in: path
        name: execution_id
        required: true
        type: integer
      - description: Detector results
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DetectorResultRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Results uploaded successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_AlgorithmResultUploadResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Algorithm or execution not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Upload detector algorithm results
      tags:
      - Algorithms
  /api/v2/algorithms/{algorithm_id}/executions/{execution_id}/results:
    post:
      consumes:
      - application/json
      description: 'Upload granularity results for regular algorithms. Supports two
        modes: 1) Use existing execution_id, 2) Auto-create execution using algorithm_id
        and datapack_id'
      parameters:
      - description: Algorithm ID
        in: path
        name: algorithm_id
        required: true
        type: integer
      - description: Execution ID (optional - will create new if not provided)
        in: path
        name: execution_id
        type: integer
      - description: Granularity results with optional execution creation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GranularityResultEnhancedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Results uploaded successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_AlgorithmResultUploadResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Algorithm or datapack not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Upload granularity algorithm results
      tags:
      - Algorithms
  /api/v2/algorithms/{algorithm_id}/results:
    post:
      consumes:
      - application/json
      description: 'Upload granularity results for regular algorithms. Supports two
        modes: 1) Use existing execution_id, 2) Auto-create execution using algorithm_id
        and datapack_id'
      parameters:
      - description: Algorithm ID
        in: path
        name: algorithm_id
        required: true
        type: integer
      - description: Granularity results with optional execution creation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GranularityResultEnhancedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Results uploaded successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_AlgorithmResultUploadResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Algorithm or datapack not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Upload granularity algorithm results
      tags:
      - Algorithms
  /api/v2/algorithms/search:
    post:
      consumes:
      - application/json
      description: Search algorithms with complex filtering, sorting and pagination.
        Algorithms are containers with type 'algorithm'
      parameters:
      - description: Algorithm search request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AlgorithmSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Algorithms retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_AlgorithmResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Search algorithms
      tags:
      - Algorithms
  /api/v2/audit:
    get:
      description: Get paginated list of audit logs with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      - description: Filter by user ID
        in: query
        name: user_id
        type: integer
      - description: Filter by action
        in: query
        name: action
        type: string
      - description: Filter by resource
        in: query
        name: resource
        type: string
      - description: Filter by success status
        in: query
        name: success
        type: boolean
      - description: Filter from date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: Filter to date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Audit logs retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_AuditLogListResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: List audit logs
      tags:
      - System
    post:
      consumes:
      - application/json
      description: Create a new audit log entry
      parameters:
      - description: Audit log data
        in: body
        name: audit_log
        required: true
        schema:
          $ref: '#/definitions/dto.AuditLogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Audit log created successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_AuditLogResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Create audit log
      tags:
      - System
  /api/v2/audit/{id}:
    get:
      description: Get a specific audit log entry by ID
      parameters:
      - description: Audit log ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Audit log retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_AuditLogResponse'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Audit log not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get audit log by ID
      tags:
      - System
  /api/v2/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change password for authenticated user
      parameters:
      - description: Password change request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "401":
          description: Unauthorized or invalid old password
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Authentication
  /api/v2/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_LoginResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: User login
      tags:
      - Authentication
  /api/v2/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate token
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: User logout
      tags:
      - Authentication
  /api/v2/auth/profile:
    get:
      description: Get profile information for authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - Authentication
  /api/v2/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh an existing JWT token
      parameters:
      - description: Token refresh request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TokenRefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_TokenRefreshResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Refresh JWT token
      tags:
      - Authentication
  /api/v2/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_UserInfo'
        "400":
          description: Invalid request or validation error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: User registration
      tags:
      - Authentication
  /api/v2/containers:
    get:
      description: Get a simple list of containers with basic filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      - description: Container type filter
        enum:
        - algorithm
        - benchmark
        in: query
        name: type
        type: string
      - description: Container status filter
        in: query
        name: status
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Containers retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_ContainerResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List containers
      tags:
      - Containers
    post:
      consumes:
      - multipart/form-data
      description: Create a new container with build configuration or update existing
        one if it already exists. Containers are associated with the authenticated
        user. If a container with the same name, type, image, and tag already exists,
        it will be updated instead of creating a new one.
      parameters:
      - default: algorithm
        description: Container type
        enum:
        - algorithm
        - benchmark
        in: formData
        name: type
        required: true
        type: string
      - description: Container name
        in: formData
        name: name
        required: true
        type: string
      - description: Docker image name
        in: formData
        name: image
        required: true
        type: string
      - default: latest
        description: Docker image tag
        in: formData
        name: tag
        type: string
      - default: /bin/bash
        description: Container startup command
        in: formData
        name: command
        type: string
      - collectionFormat: csv
        description: Environment variables (can be specified multiple times)
        in: formData
        items:
          type: string
        name: env_vars
        type: array
      - default: false
        description: Whether the container is public
        in: formData
        name: is_public
        type: boolean
      - default: file
        description: Build source type
        enum:
        - file
        - github
        - harbor
        in: formData
        name: build_source_type
        type: string
      - description: Source code file (zip or tar.gz format, max 5MB) - required when
          build_source_type=file
        in: formData
        name: file
        type: file
      - description: GitHub repository (owner/repo) - required when build_source_type=github
        in: formData
        name: github_repository
        type: string
      - default: main
        description: GitHub branch name
        in: formData
        name: github_branch
        type: string
      - description: GitHub commit hash (if specified, branch is ignored)
        in: formData
        name: github_commit
        type: string
      - default: .
        description: Path within repository
        in: formData
        name: github_path
        type: string
      - description: GitHub access token for private repositories
        in: formData
        name: github_token
        type: string
      - description: Harbor image name - required when build_source_type=harbor
        in: formData
        name: harbor_image
        type: string
      - description: Harbor image tag - required when build_source_type=harbor
        in: formData
        name: harbor_tag
        type: string
      - default: .
        description: Docker build context directory
        in: formData
        name: context_dir
        type: string
      - default: Dockerfile
        description: Dockerfile path relative to source root
        in: formData
        name: dockerfile_path
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Container information updated successfully from Harbor
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SubmitResp'
        "202":
          description: Container creation/update task submitted successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SubmitResp'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Create or update container
      tags:
      - Containers
  /api/v2/containers/{id}:
    delete:
      description: Delete a container (soft delete by setting status to false)
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Container deleted successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid container ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Delete container
      tags:
      - Containers
    get:
      description: Get detailed information about a specific container
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Container retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_ContainerResponse'
        "400":
          description: Invalid container ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get container by ID
      tags:
      - Containers
    put:
      consumes:
      - application/json
      description: Update an existing container's information
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: integer
      - description: Container update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateContainerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Container updated successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_ContainerResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Container not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Update container
      tags:
      - Containers
  /api/v2/containers/search:
    post:
      description: Search containers with complex filtering, sorting and pagination.
        Supports all container types (algorithm, benchmark, etc.)
      parameters:
      - description: Container search request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ContainerSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Containers retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_ContainerResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Search containers
      tags:
      - Containers
  /api/v2/datasets:
    get:
      description: Get a paginated list of datasets with filtering and sorting
      parameters:
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Page size (default 20, max 100)
        in: query
        name: size
        type: integer
      - description: Filter by project ID
        in: query
        name: project_id
        type: integer
      - description: Filter by dataset type
        in: query
        name: type
        type: string
      - description: Filter by status
        in: query
        name: status
        type: integer
      - description: Filter by public status
        in: query
        name: is_public
        type: boolean
      - description: Search in name and description
        in: query
        name: search
        type: string
      - description: Sort field (id,name,created_at,updated_at)
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc,desc)
        in: query
        name: sort_order
        type: string
      - description: Include related data (project,injections,labels)
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Datasets retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_DatasetSearchResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List datasets
      tags:
      - Datasets
    post:
      consumes:
      - application/json
      description: Create a new dataset with optional injection and label associations
      parameters:
      - description: Dataset creation request
        in: body
        name: dataset
        required: true
        schema:
          $ref: '#/definitions/dto.DatasetV2CreateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Dataset created successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_DatasetV2Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "409":
          description: Dataset already exists
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Create dataset
      tags:
      - Datasets
  /api/v2/datasets/{id}:
    delete:
      description: Soft delete a dataset (sets status to -1)
      parameters:
      - description: Dataset ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Dataset deleted successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid dataset ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Delete dataset
      tags:
      - Datasets
    get:
      description: Get detailed information about a specific dataset
      parameters:
      - description: Dataset ID
        in: path
        name: id
        required: true
        type: integer
      - description: Include related data (project,injections,labels)
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Dataset retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_DatasetV2Response'
        "400":
          description: Invalid dataset ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get dataset by ID
      tags:
      - Datasets
    put:
      consumes:
      - application/json
      description: Update dataset information, injection and label associations
      parameters:
      - description: Dataset ID
        in: path
        name: id
        required: true
        type: integer
      - description: Dataset update request
        in: body
        name: dataset
        required: true
        schema:
          $ref: '#/definitions/dto.DatasetV2UpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Dataset updated successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_DatasetV2Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Update dataset
      tags:
      - Datasets
  /api/v2/datasets/{id}/injections:
    patch:
      consumes:
      - application/json
      description: Add or remove injection associations for a dataset
      parameters:
      - description: Dataset ID
        in: path
        name: id
        required: true
        type: integer
      - description: Injection management request
        in: body
        name: manage
        required: true
        schema:
          $ref: '#/definitions/dto.DatasetV2InjectionManageReq'
      produces:
      - application/json
      responses:
        "200":
          description: Injections managed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_DatasetV2Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Manage dataset injections
      tags:
      - Datasets
  /api/v2/datasets/{id}/labels:
    patch:
      consumes:
      - application/json
      description: Add, remove labels or create new labels for a dataset
      parameters:
      - description: Dataset ID
        in: path
        name: id
        required: true
        type: integer
      - description: Label management request
        in: body
        name: manage
        required: true
        schema:
          $ref: '#/definitions/dto.DatasetV2LabelManageReq'
      produces:
      - application/json
      responses:
        "200":
          description: Labels managed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_DatasetV2Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Dataset not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Manage dataset labels
      tags:
      - Datasets
  /api/v2/datasets/search:
    post:
      consumes:
      - application/json
      description: Advanced search for datasets with complex filtering
      parameters:
      - description: Search criteria
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/dto.DatasetV2SearchReq'
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_DatasetV2Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Search datasets
      tags:
      - Datasets
  /api/v2/health:
    get:
      description: Get system health status and service information
      produces:
      - application/json
      responses:
        "200":
          description: Health check successful
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_HealthCheckResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: System health check
      tags:
      - System
  /api/v2/injections:
    get:
      description: Get a paginated list of injections with filtering and sorting
      parameters:
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Page size (default 20, max 100)
        in: query
        name: size
        type: integer
      - description: Filter by task ID
        in: query
        name: task_id
        type: string
      - description: Filter by fault type
        in: query
        name: fault_type
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: integer
      - description: Filter by benchmark
        in: query
        name: benchmark
        type: string
      - description: Search in injection name and description
        in: query
        name: search
        type: string
      - description: Sort field (id,task_id,fault_type,status,benchmark,injection_name,created_at,updated_at)
        in: query
        name: sort_by
        type: string
      - description: Sort order (asc,desc)
        in: query
        name: sort_order
        type: string
      - description: Include related data (task)
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Injections retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_InjectionSearchResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List injections
      tags:
      - Injections
  /api/v2/injections/{id}:
    delete:
      description: Soft delete an injection (sets status to -1)
      parameters:
      - description: Injection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Injection deleted successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid injection ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Injection not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Delete injection
      tags:
      - Injections
    get:
      description: Get detailed information about a specific injection
      parameters:
      - description: Injection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Include related data (task)
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Injection retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_InjectionV2Response'
        "400":
          description: Invalid injection ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Injection not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get injection by ID
      tags:
      - Injections
    put:
      consumes:
      - application/json
      description: Update injection information
      parameters:
      - description: Injection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Injection update request
        in: body
        name: injection
        required: true
        schema:
          $ref: '#/definitions/dto.InjectionV2UpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: Injection updated successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_InjectionV2Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Injection not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Update injection
      tags:
      - Injections
  /api/v2/injections/search:
    post:
      consumes:
      - application/json
      description: Advanced search for injections with complex filtering
      parameters:
      - description: Search criteria
        in: body
        name: search
        required: true
        schema:
          $ref: '#/definitions/dto.InjectionV2SearchReq'
      produces:
      - application/json
      responses:
        "200":
          description: Search results
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_InjectionV2Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Search injections
      tags:
      - Injections
  /api/v2/monitor/info:
    get:
      description: Get basic system information and status
      produces:
      - application/json
      responses:
        "200":
          description: System info retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SystemInfo'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get system information
      tags:
      - System
  /api/v2/monitor/metrics:
    post:
      consumes:
      - application/json
      description: Query monitoring metrics for system performance
      parameters:
      - description: Metrics query request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MonitoringQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Metrics retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_MonitoringMetricsResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get monitoring metrics
      tags:
      - System
  /api/v2/permissions:
    get:
      description: Get paginated list of permissions with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      - description: Filter by action
        in: query
        name: action
        type: string
      - description: Filter by resource ID
        in: query
        name: resource_id
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: integer
      - description: Filter by system permission
        in: query
        name: is_system
        type: boolean
      - description: Filter by permission name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permissions retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_PermissionListResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List permissions
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: Create a new permission with specified resource and action
      parameters:
      - description: Permission creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePermissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Permission created successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_PermissionResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "409":
          description: Permission already exists
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Create a new permission
      tags:
      - Permissions
  /api/v2/permissions/{id}:
    delete:
      description: Delete a permission (soft delete by setting status to -1)
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permission deleted successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid permission ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Cannot delete system permission
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Delete permission
      tags:
      - Permissions
    get:
      description: Get detailed information about a specific permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permission retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_PermissionResponse'
        "400":
          description: Invalid permission ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get permission by ID
      tags:
      - Permissions
    put:
      consumes:
      - application/json
      description: Update permission information (partial update supported)
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permission updated successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_PermissionResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Update permission
      tags:
      - Permissions
  /api/v2/permissions/{id}/roles:
    get:
      description: Get list of roles that have been assigned a specific permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-array_dto_RoleResponse'
        "400":
          description: Invalid permission ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get permission roles
      tags:
      - Permissions
  /api/v2/permissions/resource/{resource_id}:
    get:
      description: Get list of permissions associated with a specific resource
      parameters:
      - description: Resource ID
        in: path
        name: resource_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Permissions retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-array_dto_PermissionResponse'
        "400":
          description: Invalid resource ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get permissions by resource
      tags:
      - Permissions
  /api/v2/permissions/search:
    post:
      consumes:
      - application/json
      description: Search permissions with complex filtering and sorting
      parameters:
      - description: Permission search request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_PermissionResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Search permissions
      tags:
      - Permissions
  /api/v2/relations:
    get:
      description: Get paginated list of relationships with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      - description: Relationship type
        in: query
        name: type
        type: string
      - description: Source entity type
        in: query
        name: source_type
        type: string
      - description: Target entity type
        in: query
        name: target_type
        type: string
      - description: Source entity ID
        in: query
        name: source_id
        type: integer
      - description: Target entity ID
        in: query
        name: target_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Relations retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_RelationListResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List relationships
      tags:
      - Relations
  /api/v2/relations/batch:
    post:
      consumes:
      - application/json
      description: Perform multiple relationship operations in a single request
      parameters:
      - description: Batch relation operations request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchRelationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Batch operations completed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Batch relationship operations
      tags:
      - Relations
  /api/v2/relations/role-permissions:
    delete:
      consumes:
      - application/json
      description: Remove multiple permissions from a role
      parameters:
      - description: Role permission removal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RemoveRolePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions removed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Remove permissions from role
      tags:
      - Relations
    post:
      consumes:
      - application/json
      description: Assign multiple permissions to a role
      parameters:
      - description: Role permission assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignRolePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions assigned successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Role or permission not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Assign permissions to role
      tags:
      - Relations
  /api/v2/relations/statistics:
    get:
      description: Get statistics about all relationship types in the system
      produces:
      - application/json
      responses:
        "200":
          description: Statistics retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_RelationStatisticsResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get relationship statistics
      tags:
      - Relations
  /api/v2/relations/user-permissions:
    delete:
      consumes:
      - application/json
      description: Remove a permission directly from a user
      parameters:
      - description: User permission removal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RemoveUserPermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permission removed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Remove permission from user
      tags:
      - Relations
    post:
      consumes:
      - application/json
      description: Assign a permission directly to a user (with optional project scope)
      parameters:
      - description: User permission assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignUserPermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permission assigned successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: User or permission not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Assign permission to user
      tags:
      - Relations
  /api/v2/relations/user-roles:
    delete:
      consumes:
      - application/json
      description: Remove a role from a user (global role removal)
      parameters:
      - description: User role removal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RemoveUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role removed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: User or role not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Remove role from user
      tags:
      - Relations
    post:
      consumes:
      - application/json
      description: Assign a role to a user (global role assignment)
      parameters:
      - description: User role assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role assigned successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: User or role not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Assign role to user
      tags:
      - Relations
  /api/v2/roles:
    get:
      description: Get paginated list of roles with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      - description: Filter by role type
        in: query
        name: type
        type: string
      - description: Filter by status
        in: query
        name: status
        type: integer
      - description: Filter by system role
        in: query
        name: is_system
        type: boolean
      - description: Filter by role name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_RoleListResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Create a new role with specified permissions
      parameters:
      - description: Role creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_RoleResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "409":
          description: Role already exists
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Roles
  /api/v2/roles/{id}:
    delete:
      description: Delete a role (soft delete by setting status to -1)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Cannot delete system role
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Delete role
      tags:
      - Roles
    get:
      description: Get detailed information about a specific role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Role retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_RoleResponse'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get role by ID
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Update role information (partial update supported)
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_RoleResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Update role
      tags:
      - Roles
  /api/v2/roles/{id}/permissions:
    delete:
      consumes:
      - application/json
      description: Remove multiple permissions from a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission removal request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RemovePermissionFromRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions removed successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Remove permissions from role
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Assign multiple permissions to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignPermissionToRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions assigned successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Assign permissions to role
      tags:
      - Roles
  /api/v2/roles/{id}/users:
    get:
      description: Get list of users assigned to a specific role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-array_dto_UserResponse'
        "400":
          description: Invalid role ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get role users
      tags:
      - Roles
  /api/v2/roles/search:
    post:
      consumes:
      - application/json
      description: Search roles with complex filtering and sorting
      parameters:
      - description: Role search request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RoleSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_RoleResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Search roles
      tags:
      - Roles
  /api/v2/statistics:
    get:
      description: Get comprehensive system statistics and metrics
      produces:
      - application/json
      responses:
        "200":
          description: Statistics retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SystemStatisticsResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      summary: Get system statistics
      tags:
      - System
  /api/v2/tasks:
    get:
      description: Get a simple list of tasks with basic filtering via query parameters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      - description: Filter by task ID
        in: query
        name: task_id
        type: string
      - description: Filter by trace ID
        in: query
        name: trace_id
        type: string
      - description: Filter by group ID
        in: query
        name: group_id
        type: string
      - description: Filter by task type
        enum:
        - RestartService
        - FaultInjection
        - BuildDataset
        - RunAlgorithm
        - CollectResult
        - BuildImage
        in: query
        name: task_type
        type: string
      - description: Filter by status
        enum:
        - Pending
        - Running
        - Completed
        - Error
        - Cancelled
        - Scheduled
        - Rescheduled
        in: query
        name: status
        type: string
      - description: Filter by immediate execution
        in: query
        name: immediate
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Tasks retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_TaskResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List tasks
      tags:
      - Tasks
  /api/v2/tasks/{id}:
    get:
      description: Get detailed information about a specific task including logs
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: multi
        description: Include additional data (logs)
        in: query
        items:
          type: string
        name: include
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Task retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_TaskDetailResponse'
        "400":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get task by ID
      tags:
      - Tasks
  /api/v2/tasks/queue:
    post:
      consumes:
      - application/json
      description: Get tasks in queue (ready and delayed) with pagination and filtering
      parameters:
      - description: Search request with pagination
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AdvancedSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Queued tasks retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_TaskResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get queued tasks
      tags:
      - Tasks
  /api/v2/tasks/search:
    post:
      consumes:
      - application/json
      description: Search tasks with complex filtering, sorting and pagination
      parameters:
      - description: Task search request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.TaskSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tasks retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_TaskResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "403":
          description: Permission denied
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Search tasks
      tags:
      - Tasks
  /api/v2/users:
    get:
      description: Get paginated list of users with optional filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: integer
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      - description: Filter by username
        in: query
        name: username
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by full name
        in: query
        name: full_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_UserListResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user account with specified details
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_UserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Users
  /api/v2/users/{id}:
    delete:
      description: Delete a user (soft delete by setting status to -1)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Get detailed information about a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_UserResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user information (partial update supported)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_UserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
  /api/v2/users/{id}/projects:
    post:
      consumes:
      - application/json
      description: Assign a user to a project with a specific role
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AssignUserToProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User assigned to project successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Assign user to project
      tags:
      - Users
  /api/v2/users/{id}/projects/{project_id}:
    delete:
      description: Remove a user from a project
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Project ID
        in: path
        name: project_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User removed from project successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Remove user from project
      tags:
      - Users
  /api/v2/users/search:
    post:
      consumes:
      - application/json
      description: Search users with complex filtering and sorting
      parameters:
      - description: User search request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/dto.GenericResponse-dto_SearchResponse-dto_UserResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.GenericResponse-any'
      security:
      - BearerAuth: []
      summary: Search users
      tags:
      - Users
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
