{
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "RCABench - A comprehensive root cause analysis benchmarking platform for microservices\nThis API provides endpoints for managing datasets, algorithms, evaluations, and fault injections\nfor root cause analysis in distributed systems and microservices architectures.",
        "title": "RCABench API",
        "contact": {
            "name": "RCABench Team",
            "email": "team@rcabench.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.1"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/api/v1/algorithms": {
            "get": {
                "description": "Get all available algorithms in the system, including image info, tags, and update time. Only returns containers with active status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "algorithm"
                ],
                "summary": "Get algorithm list",
                "responses": {
                    "200": {
                        "description": "Successfully returned algorithm list",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_ListAlgorithmsResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "description": "Batch submit algorithm execution tasks, supporting multiple algorithm and dataset combinations. The system assigns a unique TraceID for each execution task to track status and results.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "algorithm"
                ],
                "summary": "Submit algorithm execution task",
                "parameters": [
                    {
                        "description": "Algorithm execution request list, including algorithm name, dataset, and environment variables",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SubmitExecutionReq"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully submitted algorithm execution task, returns task tracking info",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SubmitResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as invalid JSON format, algorithm name or dataset name, unsupported environment variable name, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/analyzers/injections": {
            "get": {
                "description": "Analyze fault injection data using various filtering conditions, returning statistical information including efficiency, diversity, distance between seeds, etc.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyzer"
                ],
                "summary": "Analyze fault injection data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project name filter",
                        "name": "project_name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "dev",
                            "prod"
                        ],
                        "type": "string",
                        "default": "prod",
                        "description": "Environment label filter",
                        "name": "env",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Batch label filter",
                        "name": "batch",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "train",
                            "test"
                        ],
                        "type": "string",
                        "default": "train",
                        "description": "Classification label filter",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "clickhouse"
                        ],
                        "type": "string",
                        "default": "clickhouse",
                        "description": "Benchmark type filter",
                        "name": "benchmark",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Status filter, refer to field mapping interface (/mapping) for specific values",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Fault type filter, refer to field mapping interface (/mapping) for specific values",
                        "name": "fault_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time range query, supports custom relative time (1h/24h/7d) or custom, default is not set",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom start time, RFC3339 format, required when lookback=custom",
                        "name": "custom_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom end time, RFC3339 format, required when lookback=custom",
                        "name": "custom_end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns fault injection analysis statistics",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AnalyzeInjectionsResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect parameter format, validation failure, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/analyzers/traces": {
            "get": {
                "description": "Analyze trace data using various filtering conditions, returning statistical information including traces ending with fault injection",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trace"
                ],
                "summary": "Analyze trace data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First task type filter",
                        "name": "first_task_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time range query, supports custom relative time (1h/24h/7d) or custom, default is not set",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom start time, RFC3339 format, required when lookback=custom",
                        "name": "custom_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom end time, RFC3339 format, required when lookback=custom",
                        "name": "custom_end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns trace analysis statistics",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_TraceStats"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect parameter format, validation failure, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/containers": {
            "post": {
                "description": "Build Docker images by uploading files, specifying GitHub repositories, or Harbor images. Supports zip and tar.gz file uploads, or automatically pulls code from GitHub for building, or directly updates the database from existing Harbor images. The system automatically validates required files (Dockerfile) and sets execution permissions.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "container"
                ],
                "summary": "Submit container build task",
                "parameters": [
                    {
                        "enum": [
                            "algorithm",
                            "benchmark"
                        ],
                        "type": "string",
                        "default": "algorithm",
                        "description": "Container type, specifies the purpose of the container",
                        "name": "type",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Container name, used to identify the container, will be used as the image build identifier, defaults to the name field in info.toml",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Docker image name. When source_type is harbor, specify the existing image name in Harbor; otherwise, supports the following formats: 1) image-name (automatically adds default Harbor address and namespace) 2) namespace/image-name (automatically adds default Harbor address)",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "latest",
                        "description": "Docker image tag. When source_type is harbor, specify the existing image tag in Harbor; otherwise, used for version control",
                        "name": "tag",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "bash /entrypoint.sh",
                        "description": "Docker image startup command, defaults to bash /entrypoint.sh",
                        "name": "command",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of environment variable names, supports multiple variables",
                        "name": "env_vars",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            "file",
                            "github",
                            "harbor"
                        ],
                        "type": "string",
                        "default": "file",
                        "description": "Build source type, specifies the source of the code",
                        "name": "source_type",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Source file (supports zip or tar.gz format), required when source_type is file, file size limit 5MB",
                        "name": "file",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "GitHub access token, used for private repositories, not required for public repositories",
                        "name": "github_token",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "GitHub repository address, format: owner/repo, required when source_type is github",
                        "name": "github_repo",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "main",
                        "description": "GitHub branch name, specifies the branch to build",
                        "name": "github_branch",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "GitHub commit hash (supports short hash), if specified, branch parameter is ignored",
                        "name": "github_commit",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": ".",
                        "description": "Subdirectory path in the repository, if the source code is not in the root directory",
                        "name": "github_path",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": ".",
                        "description": "Docker build context path, relative to the source root directory",
                        "name": "context_dir",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "Dockerfile",
                        "description": "Dockerfile path, relative to the source root directory",
                        "name": "dockerfile_path",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Dockerfile build target (used for multi-stage builds)",
                        "name": "target",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether to force rebuild the image, ignore cache",
                        "name": "force_rebuild",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully submitted container build task, returns task tracking information",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SubmitResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error: unsupported file format (only zip, tar.gz), file size exceeds limit (5MB), parameter validation failed, invalid GitHub repository address, invalid Harbor image parameter, invalid force_rebuild value, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Resource not found: build context path does not exist, missing required files (Dockerfile, entrypoint.sh), image not found in Harbor",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/datasets": {
            "post": {
                "description": "Batch build datasets based on specified time range and benchmark container",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dataset"
                ],
                "summary": "Batch build datasets",
                "parameters": [
                    {
                        "description": "List of dataset build requests; each request includes dataset name, time range, benchmark, and environment variable configuration",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SubmitDatasetBuildingReq"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully submitted dataset building tasks; returns group ID and trace information list",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SubmitResp"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters: 1) Invalid JSON format 2) Empty dataset name 3) Invalid time range 4) Benchmark does not exist 5) Unsupported environment variable name",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete dataset data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dataset"
                ],
                "summary": "Delete dataset data",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Dataset name list",
                        "name": "names",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_DatasetDeleteResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/datasets/download": {
            "get": {
                "description": "Package specified datasets into a ZIP file for download, automatically excluding result.csv and detector conclusion files. Supports downloading by group ID or dataset name (mutually exclusive). Directory structure: when downloading by group ID: datasets/{groupId}/{datasetName}/...; when by name: datasets/{datasetName}/...",
                "produces": [
                    "application/zip"
                ],
                "tags": [
                    "dataset"
                ],
                "summary": "Download dataset archive file",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of task group IDs, format: group1,group2,group3. Mutually exclusive with names parameter; group_ids takes precedence",
                        "name": "group_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of dataset names, format: dataset1,dataset2,dataset3. Mutually exclusive with group_ids parameter",
                        "name": "names",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ZIP file stream; the Content-Disposition header contains filename datasets.zip",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request parameters: 1) Parameter binding failed 2) Both parameters are empty 3) Both parameters provided",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission error: requested dataset path is not within allowed scope",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/debug/ns/status": {
            "get": {
                "description": "Get namespace lock status information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "debug"
                ],
                "summary": "Get namespace lock status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/evaluations/executions": {
            "get": {
                "description": "Get all records in ExecutionResult with status ExecutionSuccess, supports time range filtering and quantity filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "evaluation"
                ],
                "summary": "Get successful algorithm execution records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start time, format: 2006-01-02T15:04:05Z07:00",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time, format: 2006-01-02T15:04:05Z07:00",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returns the list of successful algorithm execution records",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SuccessfulExecutionsResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/evaluations/groundtruth": {
            "post": {
                "description": "Get ground truth data for the given dataset array, used as benchmark data for algorithm evaluation. Supports batch query for ground truth information of multiple datasets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "evaluation"
                ],
                "summary": "Get ground truth for datasets",
                "parameters": [
                    {
                        "description": "Ground truth query request, contains dataset list",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GroundTruthReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returns ground truth information for datasets",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_GroundTruthResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect JSON format or empty dataset array",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/evaluations/raw-data": {
            "post": {
                "description": "Supports three query modes: 1) Directly pass an array of algorithm-dataset pairs for precise query; 2) Pass lists of algorithms and datasets for Cartesian product query; 3) Query by execution ID list. The three modes are mutually exclusive, only one can be selected",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "evaluation"
                ],
                "summary": "Get raw evaluation data",
                "parameters": [
                    {
                        "description": "Raw data query request, supports three modes: pairs array, (algorithms+datasets) Cartesian product, or execution_ids list",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RawDataReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returns the list of raw evaluation data",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_RawDataResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect JSON format, query mode conflict or empty parameter",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections": {
            "get": {
                "description": "Fault injection record query interface supporting sorting and filtering. Returns the original database record list without data conversion.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Get Fault Injection Record List",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project name filter",
                        "name": "project_name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "dev",
                            "prod"
                        ],
                        "type": "string",
                        "default": "prod",
                        "description": "Environment label filter",
                        "name": "env",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Batch label filter",
                        "name": "batch",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "train",
                            "test"
                        ],
                        "type": "string",
                        "default": "train",
                        "description": "Category label filter",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "clickhouse"
                        ],
                        "type": "string",
                        "default": "clickhouse",
                        "description": "Benchmark type filter",
                        "name": "benchmark",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Status filter, refer to field mapping interface (/mapping) for specific values",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Fault type filter, refer to field mapping interface (/mapping) for specific values",
                        "name": "fault_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field, default created_at",
                        "name": "sort_field",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order, default desc",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Result quantity limit, used to control the number of returned records",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination query, page number",
                        "name": "page_num",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Pagination query, records per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time range query, supports custom relative time (1h/24h/7d) or custom, default not set",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom start time, RFC3339 format, required when lookback=custom",
                        "name": "custom_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom end time, RFC3339 format, required when lookback=custom",
                        "name": "custom_end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returned fault injection record list",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_ListInjectionsResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect parameter format, validation failure, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "description": "Submit fault injection task, supporting batch submission of multiple fault configurations, the system will automatically deduplicate and return submission results",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Submit Fault Injection Task",
                "parameters": [
                    {
                        "description": "Fault injection request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SubmitInjectionReq"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully submitted fault injection task",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SubmitInjectionResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect JSON format, parameter validation failure, or invalid algorithm, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/analysis/no-issues": {
            "get": {
                "description": "Query all fault injection records without issues based on time range, returning detailed records including configuration information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Query Fault Injection Records Without Issues",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment label filter",
                        "name": "env",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Batch label filter",
                        "name": "batch",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time range query, supports custom relative time (1h/24h/7d) or custom, default not set",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom start time, RFC3339 format, required when lookback=custom",
                        "name": "custom_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom end time, RFC3339 format, required when lookback=custom",
                        "name": "custom_end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returned fault injection records without issues",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-array_dto_FaultInjectionNoIssuesResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect time format or parameter validation failure, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/analysis/stats": {
            "get": {
                "description": "Get statistical information of fault injection records, including counts of records with issues, without issues, and total records",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Get Fault Injection Statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time range query, supports custom relative time (1h/24h/7d) or custom, default not set",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom start time, RFC3339 format, required when lookback=custom",
                        "name": "custom_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom end time, RFC3339 format, required when lookback=custom",
                        "name": "custom_end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returned fault injection statistics",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_InjectionStatsResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect time format or parameter validation failure, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/analysis/with-issues": {
            "get": {
                "description": "Query all fault injection records with issues based on time range",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Query Fault Injection Records With Issues",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Environment label filter",
                        "name": "env",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Batch label filter",
                        "name": "batch",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time range query, supports custom relative time (1h/24h/7d) or custom, default not set",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom start time, RFC3339 format, required when lookback=custom",
                        "name": "custom_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom end time, RFC3339 format, required when lookback=custom",
                        "name": "custom_end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-array_dto_FaultInjectionWithIssuesResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as incorrect time format or parameter validation failure, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/conf": {
            "get": {
                "description": "Get fault injection configuration for the specified namespace, supporting different display modes for configuration tree structure",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Get Fault Injection Configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace, specifies the namespace to get configuration for",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "display",
                            "engine"
                        ],
                        "type": "string",
                        "default": "engine",
                        "description": "Display mode",
                        "name": "mode",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returned configuration tree structure",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-handler_Node"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as missing namespace or mode parameter",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/configs": {
            "get": {
                "description": "Get fault injection configuration information based on multiple TraceIDs, used to view configuration details of submitted fault injection tasks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Get Injected Fault Configuration List",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "TraceID list, supports multiple values, used to query corresponding configuration information",
                        "name": "trace_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returned configuration list",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as missing TraceID parameter or incorrect format",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/mapping": {
            "get": {
                "description": "Get string-to-number mapping relationships for status and fault types, used for frontend display and API parameter validation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Get Field Mapping",
                "responses": {
                    "200": {
                        "description": "Successfully returned field mapping relationships",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_InjectionFieldMappingResp"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/ns-resources": {
            "get": {
                "description": "Get mapping of all namespaces and their corresponding resource information, or query resource information for a specific namespace. Returns a mapping table from namespace to resources, used for fault injection configuration and resource management",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Get Namespace Resource Mapping",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace name, returns resource mappings for all namespaces if not specified",
                        "name": "namespace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns resource information for the specified namespace when a namespace is provided",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-handler_Resources"
                        }
                    },
                    "404": {
                        "description": "The specified namespace does not exist",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error, unable to get resource mapping",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/query": {
            "get": {
                "description": "Query fault injection record details by name or task ID, at least one of the two parameters must be provided",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Query Single Fault Injection Record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Fault injection name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returned fault injection record details",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_QueryInjectionResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, such as missing parameters, incorrect format, or validation failure, etc.",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/injections/{task_id}/cancel": {
            "put": {
                "description": "Cancel the specified fault injection task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "injection"
                ],
                "summary": "Cancel Fault Injection Task",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_InjectCancelResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks": {
            "get": {
                "description": "Paginate and get task list by multiple conditions. Supports exact query by task ID, trace ID, group ID, or filter by type, status, etc.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Get task list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID - exact match (mutually exclusive with trace_id, group_id)",
                        "name": "task_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Trace ID - find all tasks in the same trace (mutually exclusive with task_id, group_id)",
                        "name": "trace_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Group ID - find all tasks in the same group (mutually exclusive with task_id, trace_id)",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "RestartService",
                            "FaultInjection",
                            "BuildDataset",
                            "RunAlgorithm",
                            "CollectResult",
                            "BuildImage"
                        ],
                        "type": "string",
                        "description": "Task type filter",
                        "name": "task_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "Pending",
                            "Running",
                            "Completed",
                            "Error",
                            "Cancelled",
                            "Scheduled",
                            "Rescheduled"
                        ],
                        "type": "string",
                        "description": "Task status filter",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Immediate execution - true: immediate, false: delayed",
                        "name": "immediate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "created_at",
                        "description": "Sort field, default created_at",
                        "name": "sort_field",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "desc",
                        "description": "Sort order, default desc",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Result limit, controls number of records returned",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time range query, supports relative time (1h/24h/7d) or custom, default unset",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom start time, RFC3339 format, required if lookback=custom",
                        "name": "custom_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Custom end time, RFC3339 format, required if lookback=custom",
                        "name": "custom_end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully returned fault injection record list",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_ListTasksResp"
                        }
                    },
                    "400": {
                        "description": "Request parameter error, e.g. invalid format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/queue": {
            "get": {
                "description": "Paginate and get the list of tasks waiting in the queue",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Get queued tasks",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page_num",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_PaginationResp-dto_UnifiedTask"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/{task_id}": {
            "get": {
                "description": "Get detailed information of a task by task ID, including basic info and execution logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "task"
                ],
                "summary": "Get task detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "task_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_TaskDetailResp"
                        }
                    },
                    "400": {
                        "description": "Invalid task ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v1/traces/completed": {
            "get": {
                "description": "Get completed traces within a specified time range",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trace"
                ],
                "summary": "Get completed traces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Relative time query, e.g. 1h, 24h, 7d or custom",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Required when lookback=custom, custom start time (RFC3339 format)",
                        "name": "custom_start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Required when lookback=custom, custom end time (RFC3339 format)",
                        "name": "custom_end_time",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_GetCompletedMapResp"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/algorithms": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a simple list of all active algorithms without complex filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algorithms"
                ],
                "summary": "List algorithms",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Algorithms retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_AlgorithmResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/algorithms/execute": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Submit multiple algorithm execution tasks in batch. Supports mixing datapack (v1 compatible) and dataset (v2 feature) executions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algorithms"
                ],
                "summary": "Submit batch algorithm execution",
                "parameters": [
                    {
                        "description": "Batch algorithm execution request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BatchAlgorithmExecutionRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Batch algorithm execution submitted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_BatchAlgorithmExecutionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Project, algorithm, datapack or dataset not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/algorithms/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search algorithms with complex filtering, sorting and pagination. Algorithms are containers with type 'algorithm'",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algorithms"
                ],
                "summary": "Search algorithms",
                "parameters": [
                    {
                        "description": "Algorithm search request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AlgorithmSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Algorithms retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_AlgorithmResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/algorithms/{algorithm_id}/executions/{execution_id}/detectors": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload detection results for detector algorithms via API instead of file collection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algorithms"
                ],
                "summary": "Upload detector algorithm results",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Algorithm ID",
                        "name": "algorithm_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Execution ID",
                        "name": "execution_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Detector results",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DetectorResultRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Results uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AlgorithmResultUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Algorithm or execution not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/algorithms/{algorithm_id}/executions/{execution_id}/results": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload granularity results for regular algorithms. Supports two modes: 1) Use existing execution_id, 2) Auto-create execution using algorithm_id and datapack_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algorithms"
                ],
                "summary": "Upload granularity algorithm results",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Algorithm ID",
                        "name": "algorithm_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Execution ID (optional - will create new if not provided)",
                        "name": "execution_id",
                        "in": "path"
                    },
                    {
                        "description": "Granularity results with optional execution creation",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GranularityResultEnhancedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Results uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AlgorithmResultUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Algorithm or datapack not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/algorithms/{algorithm_id}/results": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload granularity results for regular algorithms. Supports two modes: 1) Use existing execution_id, 2) Auto-create execution using algorithm_id and datapack_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Algorithms"
                ],
                "summary": "Upload granularity algorithm results",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Algorithm ID",
                        "name": "algorithm_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Granularity results with optional execution creation",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.GranularityResultEnhancedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Results uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AlgorithmResultUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Algorithm or datapack not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/audit": {
            "get": {
                "description": "Get paginated list of audit logs with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "List audit logs",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by resource",
                        "name": "resource",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by success status",
                        "name": "success",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter from date (YYYY-MM-DD)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter to date (YYYY-MM-DD)",
                        "name": "end_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit logs retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AuditLogListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new audit log entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Create audit log",
                "parameters": [
                    {
                        "description": "Audit log data",
                        "name": "audit_log",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AuditLogRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Audit log created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AuditLogResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/audit/{id}": {
            "get": {
                "description": "Get a specific audit log entry by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get audit log by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Audit log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit log retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AuditLogResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Audit log not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/auth/change-password": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change password for authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Password change request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid old password",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/auth/login": {
            "post": {
                "description": "Authenticate user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/auth/logout": {
            "post": {
                "description": "Logout user and invalidate token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User logout",
                "parameters": [
                    {
                        "description": "Logout request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/auth/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get profile information for authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get current user profile",
                "responses": {
                    "200": {
                        "description": "Profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_UserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/auth/refresh": {
            "post": {
                "description": "Refresh an existing JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Token refresh request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TokenRefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_TokenRefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/auth/register": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_UserInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/containers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a simple list of containers with basic filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "List containers",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "algorithm",
                            "benchmark"
                        ],
                        "type": "string",
                        "description": "Container type filter",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Container status filter",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Containers retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_ContainerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new container with build configuration or update existing one if it already exists. Containers are associated with the authenticated user. If a container with the same name, type, image, and tag already exists, it will be updated instead of creating a new one.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Create or update container",
                "parameters": [
                    {
                        "enum": [
                            "algorithm",
                            "benchmark"
                        ],
                        "type": "string",
                        "default": "algorithm",
                        "description": "Container type",
                        "name": "type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Container name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Docker image name",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "latest",
                        "description": "Docker image tag",
                        "name": "tag",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "/bin/bash",
                        "description": "Container startup command",
                        "name": "command",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Environment variables (can be specified multiple times)",
                        "name": "env_vars",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the container is public",
                        "name": "is_public",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            "file",
                            "github",
                            "harbor"
                        ],
                        "type": "string",
                        "default": "file",
                        "description": "Build source type",
                        "name": "build_source_type",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Source code file (zip or tar.gz format, max 5MB) - required when build_source_type=file",
                        "name": "file",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "GitHub repository (owner/repo) - required when build_source_type=github",
                        "name": "github_repository",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "main",
                        "description": "GitHub branch name",
                        "name": "github_branch",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "GitHub commit hash (if specified, branch is ignored)",
                        "name": "github_commit",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": ".",
                        "description": "Path within repository",
                        "name": "github_path",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "GitHub access token for private repositories",
                        "name": "github_token",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Harbor image name - required when build_source_type=harbor",
                        "name": "harbor_image",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Harbor image tag - required when build_source_type=harbor",
                        "name": "harbor_tag",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": ".",
                        "description": "Docker build context directory",
                        "name": "context_dir",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "Dockerfile",
                        "description": "Dockerfile path relative to source root",
                        "name": "dockerfile_path",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container information updated successfully from Harbor",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SubmitResp"
                        }
                    },
                    "202": {
                        "description": "Container creation/update task submitted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SubmitResp"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/containers/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search containers with complex filtering, sorting and pagination. Supports all container types (algorithm, benchmark, etc.)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Search containers",
                "parameters": [
                    {
                        "description": "Container search request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ContainerSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Containers retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_ContainerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/containers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific container",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Get container by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_ContainerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing container's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Update container",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Container update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateContainerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_ContainerResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a container (soft delete by setting status to false)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Containers"
                ],
                "summary": "Delete container",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Container ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Container deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid container ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Container not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/datasets": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of datasets with filtering and sorting",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Datasets"
                ],
                "summary": "List datasets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default 20, max 100)",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by dataset type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by public status",
                        "name": "is_public",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in name and description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field (id,name,created_at,updated_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc,desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include related data (injections,labels)",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Datasets retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_DatasetSearchResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new dataset with optional injection and label associations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Datasets"
                ],
                "summary": "Create dataset",
                "parameters": [
                    {
                        "description": "Dataset creation request",
                        "name": "dataset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DatasetV2CreateReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Dataset created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_DatasetV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "409": {
                        "description": "Dataset already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/datasets/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Advanced search for datasets with complex filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Datasets"
                ],
                "summary": "Search datasets",
                "parameters": [
                    {
                        "description": "Search criteria",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DatasetV2SearchReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_DatasetV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/datasets/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific dataset",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Datasets"
                ],
                "summary": "Get dataset by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dataset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Include related data (injections,labels)",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dataset retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_DatasetV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid dataset ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Dataset not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update dataset information, injection and label associations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Datasets"
                ],
                "summary": "Update dataset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dataset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dataset update request",
                        "name": "dataset",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DatasetV2UpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dataset updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_DatasetV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Dataset not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a dataset (sets status to -1)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Datasets"
                ],
                "summary": "Delete dataset",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dataset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dataset deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid dataset ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Dataset not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/datasets/{id}/injections": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add or remove injection associations for a dataset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Datasets"
                ],
                "summary": "Manage dataset injections",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dataset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Injection management request",
                        "name": "manage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DatasetV2InjectionManageReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Injections managed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_DatasetV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Dataset not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/datasets/{id}/labels": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add, remove labels or create new labels for a dataset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Datasets"
                ],
                "summary": "Manage dataset labels",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Dataset ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Label management request",
                        "name": "manage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DatasetV2LabelManageReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Labels managed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_DatasetV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Dataset not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/evaluations/algorithms/{algorithm}/datapacks/{datapack}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get execution result with predictions and ground truth for a specific algorithm on a specific datapack",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "evaluation"
                ],
                "summary": "Get Algorithm Datapack Evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm name",
                        "name": "algorithm",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Datapack name",
                        "name": "datapack",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tag label filter",
                        "name": "tag",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Algorithm datapack evaluation data",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AlgorithmDatapackEvaluationResp"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Algorithm or datapack not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/evaluations/algorithms/{algorithm}/datasets/{dataset}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all execution results with predictions and ground truth for a specific algorithm on a specific dataset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "evaluation"
                ],
                "summary": "Get Algorithm Dataset Evaluation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Algorithm name",
                        "name": "algorithm",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Dataset name",
                        "name": "dataset",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tag label filter",
                        "name": "tag",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Algorithm dataset evaluation data",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_AlgorithmDatasetEvaluationResp"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Algorithm or dataset not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/evaluations/label-keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the list of available label keys that can be used for filtering execution results",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "evaluation"
                ],
                "summary": "Get Available Label Keys",
                "responses": {
                    "200": {
                        "description": "Available label keys",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-array_string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/health": {
            "get": {
                "description": "Get system health status and service information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "System health check",
                "responses": {
                    "200": {
                        "description": "Health check successful",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_HealthCheckResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/injections": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a paginated list of injections with filtering and sorting",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Injections"
                ],
                "summary": "List injections",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size (default 20, max 100)",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task ID",
                        "name": "task_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by fault type",
                        "name": "fault_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by benchmark",
                        "name": "benchmark",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in injection name and description",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort field (id,task_id,fault_type,status,benchmark,injection_name,created_at,updated_at)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc,desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Include related data (task)",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Injections retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_InjectionSearchResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create one or multiple injection records with automatic labeling based on task_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Injections"
                ],
                "summary": "Create injections",
                "parameters": [
                    {
                        "description": "Injection creation request",
                        "name": "injections",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.InjectionV2CreateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Injections created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_InjectionV2CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/injections/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Advanced search for injections with complex filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Injections"
                ],
                "summary": "Search injections",
                "parameters": [
                    {
                        "description": "Search criteria",
                        "name": "search",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.InjectionV2SearchReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_InjectionV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/injections/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific injection",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Injections"
                ],
                "summary": "Get injection by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Injection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Include related data (task)",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Injection retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_InjectionV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid injection ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Injection not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update injection information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Injections"
                ],
                "summary": "Update injection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Injection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Injection update request",
                        "name": "injection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.InjectionV2UpdateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Injection updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_InjectionV2Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Injection not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete an injection (sets status to -1)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Injections"
                ],
                "summary": "Delete injection",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Injection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Injection deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid injection ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Injection not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/monitor/info": {
            "get": {
                "description": "Get basic system information and status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get system information",
                "responses": {
                    "200": {
                        "description": "System info retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SystemInfo"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/monitor/metrics": {
            "post": {
                "description": "Query monitoring metrics for system performance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get monitoring metrics",
                "parameters": [
                    {
                        "description": "Metrics query request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.MonitoringQueryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_MonitoringMetricsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/permissions": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of permissions with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "List permissions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by resource ID",
                        "name": "resource_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by system permission",
                        "name": "is_system",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by permission name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_PermissionListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new permission with specified resource and action",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Create a new permission",
                "parameters": [
                    {
                        "description": "Permission creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Permission created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_PermissionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "409": {
                        "description": "Permission already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/permissions/resource/{resource_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of permissions associated with a specific resource",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Get permissions by resource",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Resource ID",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-array_dto_PermissionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid resource ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/permissions/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search permissions with complex filtering and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Search permissions",
                "parameters": [
                    {
                        "description": "Permission search request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.PermissionSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_PermissionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/permissions/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific permission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Get permission by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_PermissionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid permission ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Permission not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update permission information (partial update supported)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Update permission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_PermissionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Permission not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a permission (soft delete by setting status to -1)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Delete permission",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid permission ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Cannot delete system permission",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Permission not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/permissions/{id}/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of roles that have been assigned a specific permission",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Permissions"
                ],
                "summary": "Get permission roles",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-array_dto_RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid permission ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Permission not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/relations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of relationships with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "List relationships",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Relationship type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Source entity type",
                        "name": "source_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Target entity type",
                        "name": "target_type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Source entity ID",
                        "name": "source_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Target entity ID",
                        "name": "target_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Relations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_RelationListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/relations/batch": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Perform multiple relationship operations in a single request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "Batch relationship operations",
                "parameters": [
                    {
                        "description": "Batch relation operations request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BatchRelationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Batch operations completed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/relations/role-permissions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign multiple permissions to a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "Assign permissions to role",
                "parameters": [
                    {
                        "description": "Role permission assignment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AssignRolePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Role or permission not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove multiple permissions from a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "Remove permissions from role",
                "parameters": [
                    {
                        "description": "Role permission removal request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RemoveRolePermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions removed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/relations/statistics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get statistics about all relationship types in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "Get relationship statistics",
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_RelationStatisticsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/relations/user-permissions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign a permission directly to a user (with optional project scope)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "Assign permission to user",
                "parameters": [
                    {
                        "description": "User permission assignment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AssignUserPermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "User or permission not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a permission directly from a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "Remove permission from user",
                "parameters": [
                    {
                        "description": "User permission removal request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RemoveUserPermissionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permission removed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/relations/user-roles": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign a role to a user (global role assignment)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "Assign role to user",
                "parameters": [
                    {
                        "description": "User role assignment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AssignUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "User or role not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a role from a user (global role removal)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Relations"
                ],
                "summary": "Remove role from user",
                "parameters": [
                    {
                        "description": "User role removal request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RemoveUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role removed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "User or role not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of roles with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List roles",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by system role",
                        "name": "is_system",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_RoleListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new role with specified permissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create a new role",
                "parameters": [
                    {
                        "description": "Role creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "409": {
                        "description": "Role already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/roles/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search roles with complex filtering and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Search roles",
                "parameters": [
                    {
                        "description": "Role search request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RoleSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Roles retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/roles/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get role by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update role information (partial update supported)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Update role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_RoleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a role (soft delete by setting status to -1)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Delete role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Cannot delete system role",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/roles/{id}/permissions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign multiple permissions to a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Assign permissions to role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission assignment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AssignPermissionToRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove multiple permissions from a role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Remove permissions from role",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission removal request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RemovePermissionFromRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions removed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/roles/{id}/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get list of users assigned to a specific role",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get role users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-array_dto_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid role ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Role not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/statistics": {
            "get": {
                "description": "Get comprehensive system statistics and metrics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get system statistics",
                "responses": {
                    "200": {
                        "description": "Statistics retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SystemStatisticsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/tasks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a simple list of tasks with basic filtering via query parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "List tasks",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task ID",
                        "name": "task_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by trace ID",
                        "name": "trace_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by group ID",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "RestartService",
                            "FaultInjection",
                            "BuildDataset",
                            "RunAlgorithm",
                            "CollectResult",
                            "BuildImage"
                        ],
                        "type": "string",
                        "description": "Filter by task type",
                        "name": "task_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "Pending",
                            "Running",
                            "Completed",
                            "Error",
                            "Cancelled",
                            "Scheduled",
                            "Rescheduled"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by immediate execution",
                        "name": "immediate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/tasks/queue": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get tasks in queue (ready and delayed) with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get queued tasks",
                "parameters": [
                    {
                        "description": "Search request with pagination",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AdvancedSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Queued tasks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/tasks/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search tasks with complex filtering, sorting and pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Search tasks",
                "parameters": [
                    {
                        "description": "Task search request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TaskSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_TaskResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/tasks/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific task including logs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Include additional data (logs)",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_TaskDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid task ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "403": {
                        "description": "Permission denied",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get paginated list of users with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by username",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by full name",
                        "name": "full_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_UserListResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new user account with specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/users/search": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search users with complex filtering and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Search users",
                "parameters": [
                    {
                        "description": "User search request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserSearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_SearchResponse-dto_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed information about a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user information (partial update supported)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-dto_UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user (soft delete by setting status to -1)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/users/{id}/projects": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign a user to a project with a specific role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Assign user to project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project assignment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AssignUserToProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User assigned to project successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        },
        "/api/v2/users/{id}/projects/{project_id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a user from a project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Remove user from project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User removed from project successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericResponse-any"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "consts.TaskType": {
            "type": "string",
            "enum": [
                "RestartService",
                "RunAlgorithm",
                "FaultInjection",
                "BuildImage",
                "BuildDataset",
                "CollectResult"
            ],
            "x-enum-varnames": [
                "TaskTypeRestartService",
                "TaskTypeRunAlgorithm",
                "TaskTypeFaultInjection",
                "TaskTypeBuildImage",
                "TaskTypeBuildDataset",
                "TaskTypeCollectResult"
            ]
        },
        "database.Container": {
            "type": "object",
            "properties": {
                "command": {
                    "description": "Startup command",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string"
                },
                "env_vars": {
                    "description": "List of environment variable names",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "image": {
                    "description": "Image name",
                    "type": "string"
                },
                "is_public": {
                    "description": "Whether publicly visible",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name",
                    "type": "string"
                },
                "status": {
                    "description": "0: deleted 1: active",
                    "type": "boolean"
                },
                "tag": {
                    "description": "Image tag",
                    "type": "string"
                },
                "type": {
                    "description": "Image type",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string"
                },
                "user": {
                    "description": "Foreign key association",
                    "allOf": [
                        {
                            "$ref": "#/definitions/database.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "Container must belong to a user",
                    "type": "integer"
                }
            }
        },
        "database.FaultInjectionSchedule": {
            "type": "object",
            "properties": {
                "benchmark": {
                    "description": "Benchmark database, add index",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation time, add time index",
                    "type": "string"
                },
                "description": {
                    "description": "Description (optional field)",
                    "type": "string"
                },
                "display_config": {
                    "description": "User-facing display configuration",
                    "type": "string"
                },
                "end_time": {
                    "description": "Expected fault end time, add time index",
                    "type": "string"
                },
                "engine_config": {
                    "description": "System-facing runtime configuration",
                    "type": "string"
                },
                "fault_type": {
                    "description": "Fault type, add composite index",
                    "type": "integer"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "injection_name": {
                    "description": "Name injected in k8s resources",
                    "type": "string"
                },
                "pre_duration": {
                    "description": "Normal data duration",
                    "type": "integer"
                },
                "start_time": {
                    "description": "Expected fault start time, add time index",
                    "type": "string"
                },
                "status": {
                    "description": "Status, add composite index",
                    "type": "integer"
                },
                "task": {
                    "description": "Foreign key association",
                    "allOf": [
                        {
                            "$ref": "#/definitions/database.Task"
                        }
                    ]
                },
                "task_id": {
                    "description": "Associated task ID, add composite index",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string"
                }
            }
        },
        "database.Label": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Label category (dataset, fault_injection, algorithm, container, etc.)",
                    "type": "string"
                },
                "color": {
                    "description": "Label color (hex format)",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string"
                },
                "description": {
                    "description": "Label description",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "is_system": {
                    "description": "Whether system label",
                    "type": "boolean"
                },
                "key": {
                    "description": "Label key",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string"
                },
                "usage": {
                    "description": "Usage count",
                    "type": "integer"
                },
                "value": {
                    "description": "Label value",
                    "type": "string"
                }
            }
        },
        "database.Project": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_public": {
                    "description": "Whether publicly visible",
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "description": "0:disabled 1:enabled -1:deleted",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.Task": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Add time index",
                    "type": "string"
                },
                "cron_expr": {
                    "type": "string"
                },
                "execute_time": {
                    "description": "Add execution time index",
                    "type": "integer"
                },
                "group_id": {
                    "description": "Add group ID index",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "immediate": {
                    "type": "boolean"
                },
                "payload": {
                    "type": "string"
                },
                "project": {
                    "description": "Foreign key association",
                    "allOf": [
                        {
                            "$ref": "#/definitions/database.Project"
                        }
                    ]
                },
                "project_id": {
                    "description": "Task can belong to a project (optional)",
                    "type": "integer"
                },
                "status": {
                    "description": "Add multiple composite indexes",
                    "type": "string"
                },
                "trace_id": {
                    "description": "Add trace ID index",
                    "type": "string"
                },
                "type": {
                    "description": "Add composite index",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "database.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "Avatar URL",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string"
                },
                "email": {
                    "description": "Email (unique)",
                    "type": "string"
                },
                "full_name": {
                    "description": "Full name",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "is_active": {
                    "description": "Whether active",
                    "type": "boolean"
                },
                "last_login_at": {
                    "description": "Last login time",
                    "type": "string"
                },
                "phone": {
                    "description": "Phone number",
                    "type": "string"
                },
                "status": {
                    "description": "0:disabled 1:enabled -1:deleted",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string"
                },
                "username": {
                    "description": "Username (unique)",
                    "type": "string"
                }
            }
        },
        "dto.AdvancedSearchRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Common filters shortcuts",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRange"
                        }
                    ]
                },
                "exclude_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "description": "Filters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "include": {
                    "description": "Include related entities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include_fields": {
                    "description": "Include/Exclude fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "keyword": {
                    "description": "Search keyword (for general text search)",
                    "type": "string"
                },
                "page": {
                    "description": "Pagination",
                    "type": "integer",
                    "minimum": 1
                },
                "project_id": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "sort": {
                    "description": "Sort",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "status": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "updated_at": {
                    "$ref": "#/definitions/dto.DateRange"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.AlgorithmDatapackEvaluationResp": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "description": "Algorithm name",
                    "type": "string"
                },
                "datapack": {
                    "description": "Datapack name",
                    "type": "string"
                },
                "executed_at": {
                    "description": "Execution time",
                    "type": "string"
                },
                "execution_id": {
                    "description": "Execution ID (0 if no execution found)",
                    "type": "integer"
                },
                "found": {
                    "description": "Whether execution result was found",
                    "type": "boolean"
                },
                "groundtruth": {
                    "description": "Ground truth for this datapack",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handler.Groundtruth"
                        }
                    ]
                },
                "predictions": {
                    "description": "Algorithm predictions",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GranularityRecord"
                    }
                }
            }
        },
        "dto.AlgorithmDatasetEvaluationResp": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "description": "Algorithm name",
                    "type": "string"
                },
                "dataset": {
                    "description": "Dataset name",
                    "type": "string"
                },
                "executed_count": {
                    "description": "Number of successfully executed datapacks",
                    "type": "integer"
                },
                "items": {
                    "description": "Evaluation items for each datapack",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DatapackEvaluationItem"
                    }
                },
                "total_count": {
                    "description": "Total number of datapacks in dataset",
                    "type": "integer"
                }
            }
        },
        "dto.AlgorithmDatasetPair": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string"
                },
                "dataset": {
                    "type": "string"
                }
            }
        },
        "dto.AlgorithmExecutionRequest": {
            "type": "object",
            "required": [
                "algorithm",
                "project_name"
            ],
            "properties": {
                "algorithm": {
                    "$ref": "#/definitions/dto.AlgorithmItem"
                },
                "datapack": {
                    "type": "string"
                },
                "dataset": {
                    "type": "string"
                },
                "dataset_version": {
                    "type": "string"
                },
                "env_vars": {
                    "type": "object"
                },
                "project_name": {
                    "type": "string"
                }
            }
        },
        "dto.AlgorithmExecutionResponse": {
            "type": "object",
            "properties": {
                "algorithm_id": {
                    "type": "integer"
                },
                "datapack_id": {
                    "type": "integer"
                },
                "dataset_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        },
        "dto.AlgorithmItem": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "dto.AlgorithmResponse": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "env_vars": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "is_public": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "project": {
                    "description": "Related entities (only included when specifically requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ProjectResponse"
                        }
                    ]
                },
                "project_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "boolean"
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.AlgorithmResultUploadResponse": {
            "type": "object",
            "properties": {
                "algorithm_id": {
                    "type": "integer"
                },
                "execution_id": {
                    "type": "integer"
                },
                "has_anomalies": {
                    "description": "Only included for detector results",
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "result_count": {
                    "type": "integer"
                },
                "uploaded_at": {
                    "type": "string"
                }
            }
        },
        "dto.AlgorithmSearchRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Common filters shortcuts",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRange"
                        }
                    ]
                },
                "exclude_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "description": "Filters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "image": {
                    "type": "string"
                },
                "include": {
                    "description": "Include related entities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include_fields": {
                    "description": "Include/Exclude fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "keyword": {
                    "description": "Search keyword (for general text search)",
                    "type": "string"
                },
                "name": {
                    "description": "Algorithm-specific filters",
                    "type": "string"
                },
                "page": {
                    "description": "Pagination",
                    "type": "integer",
                    "minimum": 1
                },
                "project_id": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "sort": {
                    "description": "Sort",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "status": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "$ref": "#/definitions/dto.DateRange"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.AnalyzeInjectionsResp": {
            "type": "object",
            "properties": {
                "efficiency": {
                    "type": "string"
                },
                "stats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/dto.InjectionStats"
                    }
                }
            }
        },
        "dto.AssignPermissionToRoleRequest": {
            "type": "object"
        },
        "dto.AssignRolePermissionRequest": {
            "type": "object"
        },
        "dto.AssignUserPermissionRequest": {
            "type": "object",
            "required": [
                "grant_type",
                "permission_id",
                "user_id"
            ],
            "properties": {
                "expires_at": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "grant_type": {
                    "type": "string",
                    "enum": [
                        "grant",
                        "deny"
                    ],
                    "example": "grant"
                },
                "permission_id": {
                    "type": "integer",
                    "example": 1
                },
                "project_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.AssignUserRoleRequest": {
            "type": "object",
            "required": [
                "role_id",
                "user_id"
            ],
            "properties": {
                "role_id": {
                    "type": "integer",
                    "example": 2
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.AssignUserToProjectRequest": {
            "type": "object",
            "required": [
                "project_id",
                "role_id"
            ],
            "properties": {
                "project_id": {
                    "type": "integer",
                    "example": 1
                },
                "role_id": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "dto.AttributeCoverageItem": {
            "type": "object",
            "properties": {
                "coverage": {
                    "type": "number"
                },
                "num": {
                    "type": "integer"
                }
            }
        },
        "dto.AuditLogListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AuditLogResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.AuditLogRequest": {
            "type": "object",
            "required": [
                "action",
                "resource"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "example": "CREATE_USER"
                },
                "details": {
                    "type": "string",
                    "example": "{\"username\":\"newuser\"}"
                },
                "resource": {
                    "type": "string",
                    "example": "users"
                },
                "resource_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "dto.AuditLogResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "example": "CREATE_USER"
                },
                "details": {
                    "type": "string",
                    "example": "{\"username\":\"newuser\"}"
                },
                "error": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "ip_address": {
                    "type": "string",
                    "example": "192.168.1.100"
                },
                "resource": {
                    "type": "string",
                    "example": "users"
                },
                "resource_id": {
                    "type": "string",
                    "example": "123"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "user_agent": {
                    "type": "string",
                    "example": "Mozilla/5.0..."
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "dto.BatchAlgorithmExecutionRequest": {
            "type": "object",
            "required": [
                "executions",
                "project_name"
            ],
            "properties": {
                "executions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AlgorithmExecutionRequest"
                    }
                },
                "labels": {
                    "description": "预置的执行标签",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ExecutionLabels"
                        }
                    ]
                },
                "project_name": {
                    "type": "string"
                }
            }
        },
        "dto.BatchAlgorithmExecutionResponse": {
            "type": "object",
            "properties": {
                "executions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AlgorithmExecutionResponse"
                    }
                },
                "group_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.BatchRelationRequest": {
            "type": "object",
            "required": [
                "operations"
            ],
            "properties": {
                "operations": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.RelationOperation"
                    }
                }
            }
        },
        "dto.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "newpassword123"
                },
                "old_password": {
                    "type": "string",
                    "example": "oldpassword123"
                }
            }
        },
        "dto.ContainerResponse": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "env_vars": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "is_public": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user": {
                    "description": "Related entities (only included when specifically requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    ]
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ContainerSearchRequest": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string"
                },
                "created_at": {
                    "description": "Common filters shortcuts",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRange"
                        }
                    ]
                },
                "exclude_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "description": "Filters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "image": {
                    "type": "string"
                },
                "include": {
                    "description": "Include related entities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include_fields": {
                    "description": "Include/Exclude fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "keyword": {
                    "description": "Search keyword (for general text search)",
                    "type": "string"
                },
                "name": {
                    "description": "Container-specific filters",
                    "type": "string"
                },
                "page": {
                    "description": "Pagination",
                    "type": "integer",
                    "minimum": 1
                },
                "project_id": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "sort": {
                    "description": "Sort",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "status": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "$ref": "#/definitions/dto.DateRange"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ContainerStatistics": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer",
                    "example": 20
                },
                "deleted": {
                    "type": "integer",
                    "example": 5
                },
                "total": {
                    "type": "integer",
                    "example": 25
                }
            }
        },
        "dto.CreatePermissionRequest": {
            "type": "object",
            "required": [
                "action",
                "display_name",
                "name",
                "resource_id"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "example": "read"
                },
                "description": {
                    "type": "string",
                    "example": "Permission to read dataset information"
                },
                "display_name": {
                    "type": "string",
                    "example": "Read Datasets"
                },
                "name": {
                    "type": "string",
                    "example": "read_datasets"
                },
                "resource_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.CreateRoleRequest": {
            "type": "object",
            "required": [
                "display_name",
                "name",
                "type"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Role for data analysis operations"
                },
                "display_name": {
                    "type": "string",
                    "example": "Data Analyst"
                },
                "name": {
                    "type": "string",
                    "example": "data_analyst"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "system",
                        "custom"
                    ],
                    "example": "custom"
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "full_name",
                "password",
                "username"
            ],
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "username": {
                    "type": "string",
                    "example": "newuser"
                }
            }
        },
        "dto.DatapackEvaluationItem": {
            "type": "object",
            "properties": {
                "datapack_name": {
                    "description": "Datapack name (from FaultInjectionSchedule)",
                    "type": "string"
                },
                "executed_at": {
                    "description": "Execution time",
                    "type": "string"
                },
                "execution_id": {
                    "description": "Execution ID",
                    "type": "integer"
                },
                "groundtruth": {
                    "description": "Ground truth for this datapack",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handler.Groundtruth"
                        }
                    ]
                },
                "predictions": {
                    "description": "Algorithm predictions",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GranularityRecord"
                    }
                }
            }
        },
        "dto.DatasetBuildPayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "benchmark": {
                    "type": "string"
                },
                "env_vars": {
                    "type": "object"
                },
                "name": {
                    "type": "string"
                },
                "pre_duration": {
                    "type": "integer"
                }
            }
        },
        "dto.DatasetDeleteResp": {
            "type": "object",
            "properties": {
                "failed_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "success_count": {
                    "type": "integer"
                }
            }
        },
        "dto.DatasetSearchResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "description": "Result list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DatasetV2Response"
                    }
                },
                "pagination": {
                    "description": "Pagination info",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PaginationInfo"
                        }
                    ]
                }
            }
        },
        "dto.DatasetStatistics": {
            "type": "object",
            "properties": {
                "private": {
                    "type": "integer",
                    "example": 70
                },
                "public": {
                    "type": "integer",
                    "example": 30
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "total_size": {
                    "type": "integer",
                    "example": 1073741824
                }
            }
        },
        "dto.DatasetV2CreateReq": {
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "data_source": {
                    "description": "Data source description",
                    "type": "string",
                    "maxLength": 500
                },
                "description": {
                    "description": "Dataset description",
                    "type": "string",
                    "maxLength": 1000
                },
                "format": {
                    "description": "Data format",
                    "type": "string",
                    "maxLength": 50
                },
                "injection_refs": {
                    "description": "Associated fault injection references (ID or name)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InjectionRef"
                    }
                },
                "is_public": {
                    "description": "Whether public, optional, defaults to false",
                    "type": "boolean"
                },
                "label_ids": {
                    "description": "Associated label ID list",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "description": "Dataset name",
                    "type": "string",
                    "maxLength": 255
                },
                "new_labels": {
                    "description": "New label list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DatasetV2LabelCreateReq"
                    }
                },
                "type": {
                    "description": "Dataset type",
                    "type": "string",
                    "maxLength": 50
                },
                "version": {
                    "description": "Dataset version, optional, defaults to v1.0",
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "dto.DatasetV2InjectionManageReq": {
            "type": "object",
            "properties": {
                "add_injections": {
                    "description": "List of fault injection IDs to add",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "remove_injections": {
                    "description": "List of fault injection IDs to remove",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.DatasetV2InjectionRelationResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Creation time",
                    "type": "string"
                },
                "fault_injection": {
                    "description": "Fault injection details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/database.FaultInjectionSchedule"
                        }
                    ]
                },
                "fault_injection_id": {
                    "description": "Fault injection ID",
                    "type": "integer"
                },
                "id": {
                    "description": "Relation ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string"
                }
            }
        },
        "dto.DatasetV2LabelCreateReq": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "category": {
                    "description": "Label category",
                    "type": "string",
                    "maxLength": 50
                },
                "color": {
                    "description": "Label color (hex format)",
                    "type": "string",
                    "maxLength": 7
                },
                "description": {
                    "description": "Label description",
                    "type": "string",
                    "maxLength": 500
                },
                "key": {
                    "description": "Label key",
                    "type": "string",
                    "maxLength": 100
                },
                "value": {
                    "description": "Label value",
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "dto.DatasetV2LabelManageReq": {
            "type": "object",
            "properties": {
                "add_labels": {
                    "description": "List of label IDs to add",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "new_labels": {
                    "description": "New label list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DatasetV2LabelCreateReq"
                    }
                },
                "remove_labels": {
                    "description": "List of label IDs to remove",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.DatasetV2Response": {
            "type": "object",
            "properties": {
                "checksum": {
                    "description": "File checksum",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string"
                },
                "data_source": {
                    "description": "Data source description",
                    "type": "string"
                },
                "description": {
                    "description": "Dataset description",
                    "type": "string"
                },
                "download_url": {
                    "description": "Download URL",
                    "type": "string"
                },
                "file_count": {
                    "description": "File count",
                    "type": "integer"
                },
                "format": {
                    "description": "Data format",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "injections": {
                    "description": "Associated fault injections",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DatasetV2InjectionRelationResponse"
                    }
                },
                "is_public": {
                    "description": "Whether public",
                    "type": "boolean"
                },
                "labels": {
                    "description": "Associated labels",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Label"
                    }
                },
                "name": {
                    "description": "Dataset name",
                    "type": "string"
                },
                "status": {
                    "description": "Status",
                    "type": "integer"
                },
                "type": {
                    "description": "Dataset type",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string"
                },
                "version": {
                    "description": "Dataset version",
                    "type": "string"
                }
            }
        },
        "dto.DatasetV2SearchReq": {
            "type": "object",
            "properties": {
                "date_range": {
                    "description": "Date range filter",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRangeFilter"
                        }
                    ]
                },
                "include": {
                    "description": "Included related data",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_public": {
                    "description": "Whether public",
                    "type": "boolean"
                },
                "label_keys": {
                    "description": "Filter by label key",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "label_values": {
                    "description": "Filter by label value",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "page": {
                    "description": "Page number",
                    "type": "integer",
                    "minimum": 1
                },
                "search": {
                    "description": "Search keywords",
                    "type": "string"
                },
                "size": {
                    "description": "Page size",
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "size_range": {
                    "description": "Size range filter",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SizeRangeFilter"
                        }
                    ]
                },
                "sort_by": {
                    "description": "Sort field",
                    "type": "string"
                },
                "sort_order": {
                    "description": "Sort direction",
                    "type": "string"
                },
                "statuses": {
                    "description": "Status list",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "types": {
                    "description": "Dataset type list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.DatasetV2UpdateReq": {
            "type": "object",
            "properties": {
                "data_source": {
                    "description": "Data source description",
                    "type": "string",
                    "maxLength": 500
                },
                "description": {
                    "description": "Dataset description",
                    "type": "string",
                    "maxLength": 1000
                },
                "format": {
                    "description": "Data format",
                    "type": "string",
                    "maxLength": 50
                },
                "injection_refs": {
                    "description": "Update associated fault injection references (complete replacement)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InjectionRef"
                    }
                },
                "is_public": {
                    "description": "Whether public",
                    "type": "boolean"
                },
                "label_ids": {
                    "description": "Update associated label ID list (complete replacement)",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "description": "Dataset name",
                    "type": "string",
                    "maxLength": 255
                },
                "new_labels": {
                    "description": "New label list",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DatasetV2LabelCreateReq"
                    }
                },
                "type": {
                    "description": "Dataset type",
                    "type": "string",
                    "maxLength": 50
                },
                "version": {
                    "description": "Dataset version",
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "dto.DateRange": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "dto.DateRangeFilter": {
            "type": "object",
            "properties": {
                "end_time": {
                    "description": "End time",
                    "type": "string"
                },
                "start_time": {
                    "description": "Start time",
                    "type": "string"
                }
            }
        },
        "dto.DetectorResultItem": {
            "type": "object",
            "required": [
                "issues",
                "span_name"
            ],
            "properties": {
                "abnormal_avg_duration": {
                    "type": "number"
                },
                "abnormal_p90": {
                    "type": "number"
                },
                "abnormal_p95": {
                    "type": "number"
                },
                "abnormal_p99": {
                    "type": "number"
                },
                "abnormal_succ_rate": {
                    "type": "number"
                },
                "issues": {
                    "type": "string"
                },
                "normal_avg_duration": {
                    "type": "number"
                },
                "normal_p90": {
                    "type": "number"
                },
                "normal_p95": {
                    "type": "number"
                },
                "normal_p99": {
                    "type": "number"
                },
                "normal_succ_rate": {
                    "type": "number"
                },
                "span_name": {
                    "type": "string"
                }
            }
        },
        "dto.DetectorResultRequest": {
            "type": "object",
            "required": [
                "results"
            ],
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DetectorResultItem"
                    }
                }
            }
        },
        "dto.ExecutionLabels": {
            "type": "object",
            "properties": {
                "tag": {
                    "description": "用户自定义标签值",
                    "type": "string"
                }
            }
        },
        "dto.ExecutionPayload": {
            "type": "object",
            "required": [
                "algorithm",
                "dataset"
            ],
            "properties": {
                "algorithm": {
                    "$ref": "#/definitions/dto.AlgorithmItem"
                },
                "dataset": {
                    "type": "string"
                },
                "env_vars": {
                    "type": "object"
                }
            }
        },
        "dto.ExecutionStatistics": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "integer",
                    "example": 50
                },
                "successful": {
                    "type": "integer",
                    "example": 750
                },
                "total": {
                    "type": "integer",
                    "example": 800
                }
            }
        },
        "dto.FaultInjectionNoIssuesResp": {
            "type": "object",
            "properties": {
                "dataset_id": {
                    "type": "integer"
                },
                "engine_config": {
                    "$ref": "#/definitions/handler.Node"
                },
                "injection_name": {
                    "type": "string"
                }
            }
        },
        "dto.FaultInjectionWithIssuesResp": {
            "type": "object",
            "properties": {
                "abnormal_avg_duration": {
                    "type": "number"
                },
                "abnormal_p99": {
                    "type": "number"
                },
                "abnormal_succ_rate": {
                    "type": "number"
                },
                "dataset_id": {
                    "type": "integer"
                },
                "engine_config": {
                    "$ref": "#/definitions/handler.Node"
                },
                "injection_name": {
                    "type": "string"
                },
                "issues": {
                    "type": "string"
                },
                "normal_avg_duration": {
                    "type": "number"
                },
                "normal_p99": {
                    "type": "number"
                },
                "normal_succ_rate": {
                    "type": "number"
                }
            }
        },
        "dto.FilterOperator": {
            "type": "string",
            "enum": [
                "eq",
                "ne",
                "gt",
                "gte",
                "lt",
                "lte",
                "like",
                "starts",
                "ends",
                "nlike",
                "in",
                "nin",
                "null",
                "nnull",
                "deq",
                "dafter",
                "dbefore",
                "dbetween"
            ],
            "x-enum-comments": {
                "OpDateAfter": "DATE(field) \u003e DATE(value)",
                "OpDateBefore": "DATE(field) \u003c DATE(value)",
                "OpDateBetween": "DATE(field) BETWEEN date1 AND date2",
                "OpDateEqual": "DATE(field) = DATE(value)",
                "OpEndsWith": "LIKE %value",
                "OpEqual": "==",
                "OpGreater": "\u003e",
                "OpGreaterEq": "\u003e=",
                "OpIn": "IN (value1, value2, ...)",
                "OpIsNotNull": "IS NOT NULL",
                "OpIsNull": "IS NULL",
                "OpLess": "\u003c",
                "OpLessEq": "\u003c=",
                "OpLike": "LIKE %value%",
                "OpNotEqual": "!=",
                "OpNotIn": "NOT IN (value1, value2, ...)",
                "OpNotLike": "NOT LIKE %value%",
                "OpStartsWith": "LIKE value%"
            },
            "x-enum-varnames": [
                "OpEqual",
                "OpNotEqual",
                "OpGreater",
                "OpGreaterEq",
                "OpLess",
                "OpLessEq",
                "OpLike",
                "OpStartsWith",
                "OpEndsWith",
                "OpNotLike",
                "OpIn",
                "OpNotIn",
                "OpIsNull",
                "OpIsNotNull",
                "OpDateEqual",
                "OpDateAfter",
                "OpDateBefore",
                "OpDateBetween"
            ]
        },
        "dto.GenericResponse-any": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data"
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-array_dto_FaultInjectionNoIssuesResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FaultInjectionNoIssuesResp"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-array_dto_FaultInjectionWithIssuesResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.FaultInjectionWithIssuesResp"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-array_dto_PermissionResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PermissionResponse"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-array_dto_RoleResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RoleResponse"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-array_dto_UserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponse"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-array_string": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_AlgorithmDatapackEvaluationResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AlgorithmDatapackEvaluationResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_AlgorithmDatasetEvaluationResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AlgorithmDatasetEvaluationResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_AlgorithmResultUploadResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AlgorithmResultUploadResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_AnalyzeInjectionsResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AnalyzeInjectionsResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_AuditLogListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AuditLogListResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_AuditLogResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AuditLogResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_BatchAlgorithmExecutionResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.BatchAlgorithmExecutionResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_ContainerResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ContainerResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_DatasetDeleteResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DatasetDeleteResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_DatasetSearchResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DatasetSearchResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_DatasetV2Response": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DatasetV2Response"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_GetCompletedMapResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.GetCompletedMapResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_GroundTruthResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.GroundTruthResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_HealthCheckResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.HealthCheckResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_InjectCancelResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.InjectCancelResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_InjectionFieldMappingResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.InjectionFieldMappingResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_InjectionSearchResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.InjectionSearchResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_InjectionStatsResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.InjectionStatsResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_InjectionV2CreateResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.InjectionV2CreateResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_InjectionV2Response": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.InjectionV2Response"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_ListAlgorithmsResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Container"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_ListInjectionsResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ListInjectionsResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_ListTasksResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Task"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_LoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_MonitoringMetricsResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.MonitoringMetricsResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_NsResourcesResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.NsResourcesResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_PaginationResp-dto_UnifiedTask": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PaginationResp-dto_UnifiedTask"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_PermissionListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PermissionListResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_PermissionResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.PermissionResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_QueryInjectionResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.QueryInjectionResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_RawDataResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RawDataItem"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_RelationListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.RelationListResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_RelationStatisticsResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.RelationStatisticsResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_RoleListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.RoleListResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_RoleResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.RoleResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SearchResponse-dto_AlgorithmResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SearchResponse-dto_AlgorithmResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SearchResponse-dto_ContainerResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SearchResponse-dto_ContainerResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SearchResponse-dto_DatasetV2Response": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SearchResponse-dto_DatasetV2Response"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SearchResponse-dto_InjectionV2Response": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SearchResponse-dto_InjectionV2Response"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SearchResponse-dto_PermissionResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SearchResponse-dto_PermissionResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SearchResponse-dto_RoleResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SearchResponse-dto_RoleResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SearchResponse-dto_TaskResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SearchResponse-dto_TaskResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SearchResponse-dto_UserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SearchResponse-dto_UserResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SubmitInjectionResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SubmitInjectionResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SubmitResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SubmitResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SuccessfulExecutionsResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SuccessfulExecutionItem"
                    }
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SystemInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SystemInfo"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_SystemStatisticsResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SystemStatisticsResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_TaskDetailResp": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TaskDetailResp"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_TaskDetailResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TaskDetailResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_TokenRefreshResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TokenRefreshResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_TraceStats": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TraceStats"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_UserInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserInfo"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_UserListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserListResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-dto_UserResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-handler_Node": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handler.Node"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GenericResponse-handler_Resources": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Status code",
                    "type": "integer"
                },
                "data": {
                    "description": "Generic type data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handler.Resources"
                        }
                    ]
                },
                "message": {
                    "description": "Response message",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Response generation time",
                    "type": "integer"
                }
            }
        },
        "dto.GetCompletedMapResp": {
            "type": "object",
            "properties": {
                "has_anomaly": {
                    "description": "List of trace IDs with detected anomalies",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "no_anomaly": {
                    "description": "List of trace IDs without anomalies",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.GranularityRecord": {
            "type": "object",
            "properties": {
                "confidence": {
                    "type": "number"
                },
                "level": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "dto.GranularityResultEnhancedRequest": {
            "type": "object",
            "required": [
                "results"
            ],
            "properties": {
                "datapack_id": {
                    "description": "Required if no execution_id",
                    "type": "integer"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GranularityResultItem"
                    }
                }
            }
        },
        "dto.GranularityResultItem": {
            "type": "object",
            "required": [
                "level",
                "rank",
                "result"
            ],
            "properties": {
                "confidence": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                },
                "level": {
                    "type": "string"
                },
                "rank": {
                    "type": "integer",
                    "minimum": 1
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "dto.GroundTruthReq": {
            "type": "object",
            "required": [
                "datasets"
            ],
            "properties": {
                "datasets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.GroundTruthResp": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/handler.Groundtruth"
            }
        },
        "dto.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/dto.ServiceInfo"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "uptime": {
                    "type": "string",
                    "example": "72h30m15s"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "dto.InjectCancelResp": {
            "type": "object"
        },
        "dto.InjectionCreateError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "item": {
                    "$ref": "#/definitions/dto.InjectionV2CreateItem"
                }
            }
        },
        "dto.InjectionDiversity": {
            "type": "object",
            "properties": {
                "attribute_coverages": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/definitions/dto.AttributeCoverageItem"
                        }
                    }
                },
                "fault_distribution": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "fault_service_coverages": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/dto.ServiceCoverageItem"
                    }
                },
                "pair_distribution": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PairStats"
                    }
                },
                "service_distribution": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.InjectionFieldMappingResp": {
            "type": "object",
            "properties": {
                "fault_resource": {
                    "type": "object"
                },
                "fault_type": {
                    "type": "object"
                },
                "status": {
                    "type": "object"
                }
            }
        },
        "dto.InjectionItem": {
            "type": "object",
            "properties": {
                "batch": {
                    "type": "string"
                },
                "benchmark": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "display_config": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "engine_config": {
                    "type": "string"
                },
                "env": {
                    "type": "string"
                },
                "fault_type": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "injection_name": {
                    "type": "string"
                },
                "pre_duration": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "dto.InjectionRef": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Injection ID",
                    "type": "integer"
                },
                "name": {
                    "description": "Injection name",
                    "type": "string"
                }
            }
        },
        "dto.InjectionSearchResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InjectionV2Response"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.InjectionStatistics": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "integer",
                    "example": 480
                },
                "failed": {
                    "type": "integer",
                    "example": 5
                },
                "running": {
                    "type": "integer",
                    "example": 5
                },
                "scheduled": {
                    "type": "integer",
                    "example": 10
                },
                "total": {
                    "type": "integer",
                    "example": 500
                }
            }
        },
        "dto.InjectionStats": {
            "type": "object",
            "properties": {
                "diversity": {
                    "$ref": "#/definitions/dto.InjectionDiversity"
                }
            }
        },
        "dto.InjectionStatsResp": {
            "type": "object",
            "properties": {
                "no_issues_injections": {
                    "type": "integer"
                },
                "no_issues_records": {
                    "type": "integer"
                },
                "with_issues_injections": {
                    "type": "integer"
                },
                "with_issues_records": {
                    "type": "integer"
                }
            }
        },
        "dto.InjectionV2CreateItem": {
            "type": "object",
            "required": [
                "benchmark",
                "display_config",
                "engine_config",
                "fault_type",
                "injection_name",
                "pre_duration"
            ],
            "properties": {
                "benchmark": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_config": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "engine_config": {
                    "type": "string"
                },
                "fault_type": {
                    "type": "integer"
                },
                "injection_name": {
                    "type": "string"
                },
                "pre_duration": {
                    "type": "integer",
                    "minimum": 0
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "dto.InjectionV2CreateReq": {
            "type": "object",
            "required": [
                "injections"
            ],
            "properties": {
                "injections": {
                    "type": "array",
                    "maxItems": 100,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.InjectionV2CreateItem"
                    }
                }
            }
        },
        "dto.InjectionV2CreateResponse": {
            "type": "object",
            "properties": {
                "created_count": {
                    "type": "integer"
                },
                "created_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InjectionV2Response"
                    }
                },
                "failed_count": {
                    "type": "integer"
                },
                "failed_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InjectionCreateError"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.InjectionV2Response": {
            "type": "object",
            "properties": {
                "benchmark": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_config": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "engine_config": {
                    "type": "string"
                },
                "fault_type": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "injection_name": {
                    "type": "string"
                },
                "pre_duration": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "task": {
                    "description": "Optional relations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TaskV2Response"
                        }
                    ]
                },
                "task_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.InjectionV2SearchReq": {
            "type": "object",
            "properties": {
                "benchmarks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at_gte": {
                    "type": "string"
                },
                "created_at_lte": {
                    "type": "string"
                },
                "end_time_gte": {
                    "type": "string"
                },
                "end_time_lte": {
                    "type": "string"
                },
                "fault_types": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "include": {
                    "type": "string"
                },
                "page": {
                    "type": "integer",
                    "minimum": 1
                },
                "search": {
                    "type": "string"
                },
                "size": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "sort_by": {
                    "type": "string",
                    "enum": [
                        "id",
                        "task_id",
                        "fault_type",
                        "status",
                        "benchmark",
                        "injection_name",
                        "created_at",
                        "updated_at"
                    ]
                },
                "sort_order": {
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "start_time_gte": {
                    "type": "string"
                },
                "start_time_lte": {
                    "type": "string"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "task_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.InjectionV2UpdateReq": {
            "type": "object",
            "properties": {
                "benchmark": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "display_config": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "engine_config": {
                    "type": "string"
                },
                "fault_type": {
                    "type": "integer"
                },
                "injection_name": {
                    "type": "string"
                },
                "pre_duration": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "dto.LabelItem": {
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "enum": [
                        "env",
                        "batch",
                        "tag"
                    ]
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "dto.ListInjectionsResp": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InjectionItem"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/dto.UserInfo"
                }
            }
        },
        "dto.LogoutRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.MetricValue": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "unit": {
                    "type": "string",
                    "example": "percent"
                },
                "value": {
                    "type": "number",
                    "example": 42.5
                }
            }
        },
        "dto.MonitoringMetricsResponse": {
            "type": "object",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/dto.MetricValue"
                    }
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                }
            }
        },
        "dto.MonitoringQueryRequest": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "end_time": {
                    "type": "string",
                    "example": "2024-01-01T23:59:59Z"
                },
                "query": {
                    "type": "string",
                    "example": "cpu_usage"
                },
                "start_time": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "step": {
                    "type": "string",
                    "example": "1m"
                }
            }
        },
        "dto.NsResourcesResp": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/handler.Resources"
            }
        },
        "dto.NumberRange": {
            "type": "object",
            "properties": {
                "max": {
                    "type": "number"
                },
                "min": {
                    "type": "number"
                }
            }
        },
        "dto.PaginationInfo": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "size": {
                    "type": "integer",
                    "example": 20
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "dto.PaginationResp-dto_UnifiedTask": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UnifiedTask"
                    }
                },
                "total": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "dto.PairStats": {
            "type": "object",
            "properties": {
                "inDegree": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "outDegree": {
                    "type": "integer"
                }
            }
        },
        "dto.PermissionListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PermissionResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.PermissionResponse": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "example": "read"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Permission to read dataset information"
                },
                "display_name": {
                    "type": "string",
                    "example": "Read Datasets"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_system": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "read_datasets"
                },
                "resource": {
                    "$ref": "#/definitions/dto.ResourceResponse"
                },
                "resource_id": {
                    "type": "integer",
                    "example": 1
                },
                "roles": {
                    "description": "Roles that have this permission",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RoleResponse"
                    }
                },
                "status": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "dto.PermissionSearchRequest": {
            "type": "object",
            "properties": {
                "actions": {
                    "description": "Action filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "description": "Common filters shortcuts",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRange"
                        }
                    ]
                },
                "description_pattern": {
                    "description": "Fuzzy match for description",
                    "type": "string"
                },
                "display_name_pattern": {
                    "description": "Fuzzy match for display name",
                    "type": "string"
                },
                "exclude_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "description": "Filters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "include": {
                    "description": "Include related entities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include_fields": {
                    "description": "Include/Exclude fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_system": {
                    "description": "Is system permission",
                    "type": "boolean"
                },
                "keyword": {
                    "description": "Search keyword (for general text search)",
                    "type": "string"
                },
                "name_pattern": {
                    "description": "Permission-specific filter shortcuts",
                    "type": "string"
                },
                "page": {
                    "description": "Pagination",
                    "type": "integer",
                    "minimum": 1
                },
                "project_id": {
                    "type": "integer"
                },
                "resource_ids": {
                    "description": "Resource ID filter",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "resource_names": {
                    "description": "Resource name filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "role_ids": {
                    "description": "Role IDs that have this permission",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "size": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "sort": {
                    "description": "Sort",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "status": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "updated_at": {
                    "$ref": "#/definitions/dto.DateRange"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.ProjectResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_public": {
                    "type": "boolean"
                },
                "members": {
                    "description": "Related entities (only included when specifically requested)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserProjectResponse"
                    }
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.ProjectStatistics": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer",
                    "example": 45
                },
                "inactive": {
                    "type": "integer",
                    "example": 5
                },
                "new_today": {
                    "type": "integer",
                    "example": 2
                },
                "total": {
                    "type": "integer",
                    "example": 50
                }
            }
        },
        "dto.QueryInjectionResp": {
            "type": "object",
            "properties": {
                "benchmark": {
                    "description": "Benchmark database, add index",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation time, add time index",
                    "type": "string"
                },
                "description": {
                    "description": "Description (optional field)",
                    "type": "string"
                },
                "display_config": {
                    "description": "User-facing display configuration",
                    "type": "string"
                },
                "end_time": {
                    "description": "Expected fault end time, add time index",
                    "type": "string"
                },
                "engine_config": {
                    "description": "System-facing runtime configuration",
                    "type": "string"
                },
                "fault_type": {
                    "description": "Fault type, add composite index",
                    "type": "integer"
                },
                "ground_truth": {
                    "$ref": "#/definitions/handler.Groundtruth"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "injection_name": {
                    "description": "Name injected in k8s resources",
                    "type": "string"
                },
                "pre_duration": {
                    "description": "Normal data duration",
                    "type": "integer"
                },
                "start_time": {
                    "description": "Expected fault start time, add time index",
                    "type": "string"
                },
                "status": {
                    "description": "Status, add composite index",
                    "type": "integer"
                },
                "task": {
                    "description": "Foreign key association",
                    "allOf": [
                        {
                            "$ref": "#/definitions/database.Task"
                        }
                    ]
                },
                "task_id": {
                    "description": "Associated task ID, add composite index",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Update time",
                    "type": "string"
                }
            }
        },
        "dto.RawDataItem": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string"
                },
                "dataset": {
                    "type": "string"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.GranularityRecord"
                    }
                },
                "execution_id": {
                    "type": "integer"
                },
                "groundtruth": {
                    "$ref": "#/definitions/handler.Groundtruth"
                }
            }
        },
        "dto.RawDataReq": {
            "type": "object",
            "properties": {
                "custom_end_time": {
                    "type": "string"
                },
                "custom_start_time": {
                    "type": "string"
                },
                "execution_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "lookback": {
                    "type": "string"
                },
                "pairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AlgorithmDatasetPair"
                    }
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "full_name",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "username": {
                    "type": "string",
                    "example": "newuser"
                }
            }
        },
        "dto.RelationEntity": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "admin"
                },
                "type": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "dto.RelationListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RelationResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.RelationOperation": {
            "type": "object",
            "required": [
                "action",
                "source_id",
                "target_id",
                "type"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "assign",
                        "remove"
                    ],
                    "example": "assign"
                },
                "source_id": {
                    "type": "integer",
                    "example": 1
                },
                "target_id": {
                    "type": "integer",
                    "example": 2
                },
                "type": {
                    "type": "string",
                    "example": "user_role"
                }
            }
        },
        "dto.RelationResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "source": {
                    "$ref": "#/definitions/dto.RelationEntity"
                },
                "target": {
                    "$ref": "#/definitions/dto.RelationEntity"
                },
                "type": {
                    "type": "string",
                    "example": "user_role"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                }
            }
        },
        "dto.RelationStatisticsResponse": {
            "type": "object",
            "properties": {
                "container_labels": {
                    "type": "integer",
                    "example": 150
                },
                "dataset_labels": {
                    "type": "integer",
                    "example": 200
                },
                "fault_injection_labels": {
                    "type": "integer",
                    "example": 120
                },
                "project_labels": {
                    "type": "integer",
                    "example": 80
                },
                "role_permissions": {
                    "type": "integer",
                    "example": 100
                },
                "user_permissions": {
                    "type": "integer",
                    "example": 25
                },
                "user_projects": {
                    "type": "integer",
                    "example": 75
                },
                "user_roles": {
                    "type": "integer",
                    "example": 50
                }
            }
        },
        "dto.RemovePermissionFromRoleRequest": {
            "type": "object"
        },
        "dto.RemoveRolePermissionRequest": {
            "type": "object"
        },
        "dto.RemoveUserPermissionRequest": {
            "type": "object",
            "required": [
                "permission_id",
                "user_id"
            ],
            "properties": {
                "permission_id": {
                    "type": "integer",
                    "example": 1
                },
                "project_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.RemoveUserRoleRequest": {
            "type": "object",
            "required": [
                "role_id",
                "user_id"
            ],
            "properties": {
                "role_id": {
                    "type": "integer",
                    "example": 2
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.ResourceResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "example": "data"
                },
                "display_name": {
                    "type": "string",
                    "example": "Datasets"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "datasets"
                },
                "type": {
                    "type": "string",
                    "example": "table"
                }
            }
        },
        "dto.RetryPolicy": {
            "type": "object",
            "properties": {
                "backoff_sec": {
                    "description": "Seconds to wait between retries",
                    "type": "integer"
                },
                "max_attempts": {
                    "description": "Maximum number of retry attempts",
                    "type": "integer"
                }
            }
        },
        "dto.RoleListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RoleResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.RoleResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Role for data analysis operations"
                },
                "display_name": {
                    "type": "string",
                    "example": "Data Analyst"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_system": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "data_analyst"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PermissionResponse"
                    }
                },
                "status": {
                    "type": "integer",
                    "example": 1
                },
                "type": {
                    "type": "string",
                    "example": "custom"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "user_count": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "dto.RoleSearchRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Common filters shortcuts",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRange"
                        }
                    ]
                },
                "description_pattern": {
                    "description": "Description fuzzy match",
                    "type": "string"
                },
                "display_name_pattern": {
                    "description": "Display name fuzzy match",
                    "type": "string"
                },
                "exclude_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "description": "Filters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "include": {
                    "description": "Include related entities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include_fields": {
                    "description": "Include/Exclude fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_system": {
                    "description": "Whether system role",
                    "type": "boolean"
                },
                "keyword": {
                    "description": "Search keyword (for general text search)",
                    "type": "string"
                },
                "name_pattern": {
                    "description": "Role-specific filter shortcuts",
                    "type": "string"
                },
                "page": {
                    "description": "Pagination",
                    "type": "integer",
                    "minimum": 1
                },
                "permission_ids": {
                    "description": "Permission ID filter",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "project_id": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "sort": {
                    "description": "Sort",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "status": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "types": {
                    "description": "Role type filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "$ref": "#/definitions/dto.DateRange"
                },
                "user_count": {
                    "description": "User count range",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.NumberRange"
                        }
                    ]
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.SearchFilter": {
            "type": "object",
            "required": [
                "field",
                "operator"
            ],
            "properties": {
                "field": {
                    "description": "Field name",
                    "type": "string"
                },
                "operator": {
                    "description": "Operator",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.FilterOperator"
                        }
                    ]
                },
                "value": {
                    "description": "Value (can be string, number, boolean, etc.)",
                    "type": "string"
                },
                "values": {
                    "description": "Multiple values (for IN operations etc.)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.SearchResponse-dto_AlgorithmResponse": {
            "type": "object",
            "properties": {
                "applied_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "applied_sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AlgorithmResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.SearchResponse-dto_ContainerResponse": {
            "type": "object",
            "properties": {
                "applied_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "applied_sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ContainerResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.SearchResponse-dto_DatasetV2Response": {
            "type": "object",
            "properties": {
                "applied_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "applied_sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DatasetV2Response"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.SearchResponse-dto_InjectionV2Response": {
            "type": "object",
            "properties": {
                "applied_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "applied_sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.InjectionV2Response"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.SearchResponse-dto_PermissionResponse": {
            "type": "object",
            "properties": {
                "applied_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "applied_sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PermissionResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.SearchResponse-dto_RoleResponse": {
            "type": "object",
            "properties": {
                "applied_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "applied_sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RoleResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.SearchResponse-dto_TaskResponse": {
            "type": "object",
            "properties": {
                "applied_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "applied_sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TaskResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.SearchResponse-dto_UserResponse": {
            "type": "object",
            "properties": {
                "applied_filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "applied_sort": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.ServiceCoverageItem": {
            "type": "object",
            "properties": {
                "coverage": {
                    "type": "number"
                },
                "notCovered": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "num": {
                    "type": "integer"
                }
            }
        },
        "dto.ServiceInfo": {
            "type": "object",
            "properties": {
                "details": {},
                "error": {
                    "type": "string"
                },
                "last_checked": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "response_time": {
                    "type": "string",
                    "example": "15ms"
                },
                "status": {
                    "type": "string",
                    "example": "healthy"
                }
            }
        },
        "dto.SizeRangeFilter": {
            "type": "object",
            "properties": {
                "max_size": {
                    "description": "Maximum size (bytes)",
                    "type": "integer"
                },
                "min_size": {
                    "description": "Minimum size (bytes)",
                    "type": "integer"
                }
            }
        },
        "dto.SortDirection": {
            "type": "string",
            "enum": [
                "asc",
                "desc"
            ],
            "x-enum-varnames": [
                "SortASC",
                "SortDESC"
            ]
        },
        "dto.SortOption": {
            "type": "object",
            "required": [
                "direction",
                "field"
            ],
            "properties": {
                "direction": {
                    "description": "Sort direction",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.SortDirection"
                        }
                    ]
                },
                "field": {
                    "description": "Sort field",
                    "type": "string"
                }
            }
        },
        "dto.SubmitDatasetBuildingReq": {
            "type": "object",
            "required": [
                "payloads",
                "project_name"
            ],
            "properties": {
                "payloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.DatasetBuildPayload"
                    }
                },
                "project_name": {
                    "type": "string"
                }
            }
        },
        "dto.SubmitExecutionReq": {
            "type": "object",
            "required": [
                "payloads",
                "project_name"
            ],
            "properties": {
                "payloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ExecutionPayload"
                    }
                },
                "project_name": {
                    "type": "string"
                }
            }
        },
        "dto.SubmitInjectionReq": {
            "type": "object",
            "required": [
                "benchmark",
                "interval",
                "pre_duration",
                "project_name",
                "specs"
            ],
            "properties": {
                "algorithms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.AlgorithmItem"
                    }
                },
                "benchmark": {
                    "type": "string"
                },
                "interval": {
                    "type": "integer",
                    "minimum": 1
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.LabelItem"
                    }
                },
                "pre_duration": {
                    "type": "integer",
                    "minimum": 1
                },
                "project_name": {
                    "type": "string"
                },
                "specs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.Node"
                    }
                }
            }
        },
        "dto.SubmitInjectionResp": {
            "type": "object",
            "properties": {
                "duplicated_count": {
                    "type": "integer"
                },
                "group_id": {
                    "type": "string"
                },
                "original_count": {
                    "type": "integer"
                },
                "traces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Trace"
                    }
                }
            }
        },
        "dto.SubmitResp": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "string"
                },
                "traces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Trace"
                    }
                }
            }
        },
        "dto.SuccessfulExecutionItem": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "description": "Algorithm name",
                    "type": "string"
                },
                "created_at": {
                    "description": "Creation time",
                    "type": "string"
                },
                "dataset": {
                    "description": "Dataset name",
                    "type": "string"
                },
                "id": {
                    "description": "Execution ID",
                    "type": "integer"
                }
            }
        },
        "dto.SystemInfo": {
            "type": "object",
            "properties": {
                "cpu_usage": {
                    "type": "number",
                    "example": 25.5
                },
                "disk_usage": {
                    "type": "number",
                    "example": 45.8
                },
                "load_average": {
                    "type": "string",
                    "example": "1.2, 1.5, 1.8"
                },
                "memory_usage": {
                    "type": "number",
                    "example": 60.2
                }
            }
        },
        "dto.SystemStatisticsResponse": {
            "type": "object",
            "properties": {
                "containers": {
                    "$ref": "#/definitions/dto.ContainerStatistics"
                },
                "datasets": {
                    "$ref": "#/definitions/dto.DatasetStatistics"
                },
                "executions": {
                    "$ref": "#/definitions/dto.ExecutionStatistics"
                },
                "generated_at": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "injections": {
                    "$ref": "#/definitions/dto.InjectionStatistics"
                },
                "projects": {
                    "$ref": "#/definitions/dto.ProjectStatistics"
                },
                "tasks": {
                    "$ref": "#/definitions/dto.TaskStatistics"
                },
                "users": {
                    "$ref": "#/definitions/dto.UserStatistics"
                }
            }
        },
        "dto.TaskDetailResp": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task": {
                    "$ref": "#/definitions/dto.TaskItem"
                }
            }
        },
        "dto.TaskDetailResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "immediate": {
                    "type": "boolean"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project": {
                    "description": "Related entities (only included when specifically requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ProjectResponse"
                        }
                    ]
                },
                "project_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.TaskItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "payload": {
                    "type": "object"
                },
                "status": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "dto.TaskResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "group_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "immediate": {
                    "type": "boolean"
                },
                "logs": {
                    "description": "Only included when specifically requested",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project": {
                    "description": "Related entities (only included when specifically requested)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ProjectResponse"
                        }
                    ]
                },
                "project_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.TaskSearchRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Common filters shortcuts",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRange"
                        }
                    ]
                },
                "exclude_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "description": "Filters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "group_id": {
                    "type": "string"
                },
                "immediate": {
                    "type": "boolean"
                },
                "include": {
                    "description": "Include related entities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include_fields": {
                    "description": "Include/Exclude fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "keyword": {
                    "description": "Search keyword (for general text search)",
                    "type": "string"
                },
                "page": {
                    "description": "Pagination",
                    "type": "integer",
                    "minimum": 1
                },
                "project_id": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "sort": {
                    "description": "Sort",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "status": {
                    "type": "string"
                },
                "task_id": {
                    "description": "Task-specific filters",
                    "type": "string"
                },
                "task_type": {
                    "type": "string"
                },
                "trace_id": {
                    "type": "string"
                },
                "updated_at": {
                    "$ref": "#/definitions/dto.DateRange"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "dto.TaskStatistics": {
            "type": "object",
            "properties": {
                "completed": {
                    "type": "integer",
                    "example": 900
                },
                "failed": {
                    "type": "integer",
                    "example": 30
                },
                "pending": {
                    "type": "integer",
                    "example": 50
                },
                "running": {
                    "type": "integer",
                    "example": 20
                },
                "total": {
                    "type": "integer",
                    "example": 1000
                }
            }
        },
        "dto.TaskV2Response": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.TokenRefreshRequest": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.TokenRefreshResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string",
                    "example": "2024-12-31T23:59:59Z"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "dto.Trace": {
            "type": "object",
            "properties": {
                "head_task_id": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        },
        "dto.TraceStats": {
            "type": "object",
            "properties": {
                "avg_duration": {
                    "type": "number"
                },
                "end_count_map": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        }
                    }
                },
                "fault_injection_traces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_duration": {
                    "type": "number"
                },
                "min_duration": {
                    "type": "number"
                },
                "total": {
                    "type": "integer"
                },
                "trace_completed_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trace_errors": {},
                "trace_status_time_map": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "number"
                        }
                    }
                }
            }
        },
        "dto.UnifiedTask": {
            "type": "object",
            "properties": {
                "cron_expr": {
                    "description": "Cron expression for recurring tasks",
                    "type": "string"
                },
                "execute_time": {
                    "description": "Unix timestamp for delayed execution",
                    "type": "integer"
                },
                "group_carrier": {
                    "description": "Carrier for group context",
                    "allOf": [
                        {
                            "$ref": "#/definitions/propagation.MapCarrier"
                        }
                    ]
                },
                "group_id": {
                    "description": "ID for grouping tasks",
                    "type": "string"
                },
                "immediate": {
                    "description": "Whether to execute immediately",
                    "type": "boolean"
                },
                "payload": {
                    "description": "Task-specific data",
                    "type": "object"
                },
                "project_id": {
                    "description": "ID for the project (optional)",
                    "type": "integer"
                },
                "restart_num": {
                    "description": "Number of restarts for the task",
                    "type": "integer"
                },
                "retry_policy": {
                    "description": "Policy for retrying failed tasks",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.RetryPolicy"
                        }
                    ]
                },
                "status": {
                    "description": "Status of the task",
                    "type": "string"
                },
                "task_id": {
                    "description": "Unique identifier for the task",
                    "type": "string"
                },
                "trace_carrier": {
                    "description": "Carrier for trace context",
                    "allOf": [
                        {
                            "$ref": "#/definitions/propagation.MapCarrier"
                        }
                    ]
                },
                "trace_id": {
                    "description": "ID for tracing related tasks",
                    "type": "string"
                },
                "type": {
                    "description": "Task type (determines how it's processed)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/consts.TaskType"
                        }
                    ]
                }
            }
        },
        "dto.UpdateContainerRequest": {
            "description": "Request structure for updating container information",
            "type": "object",
            "properties": {
                "command": {
                    "description": "@Description Container startup command (optional)",
                    "type": "string"
                },
                "env_vars": {
                    "description": "@Description Environment variables (optional)",
                    "type": "string"
                },
                "image": {
                    "description": "@Description Docker image name (optional)",
                    "type": "string"
                },
                "is_public": {
                    "description": "@Description Whether the container is public (optional)",
                    "type": "boolean"
                },
                "name": {
                    "description": "@Description Container name (optional)",
                    "type": "string"
                },
                "status": {
                    "description": "@Description Container status (optional)",
                    "type": "boolean"
                },
                "tag": {
                    "description": "@Description Docker image tag (optional)",
                    "type": "string"
                },
                "type": {
                    "description": "@Description Container type (optional)",
                    "type": "string",
                    "enum": [
                        "algorithm",
                        "benchmark"
                    ]
                }
            }
        },
        "dto.UpdatePermissionRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "example": "read"
                },
                "description": {
                    "type": "string",
                    "example": "Updated permission description"
                },
                "display_name": {
                    "type": "string",
                    "example": "Read All Datasets"
                },
                "resource_id": {
                    "type": "integer",
                    "example": 2
                },
                "status": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.UpdateRoleRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Updated role description"
                },
                "display_name": {
                    "type": "string",
                    "example": "Senior Data Analyst"
                },
                "status": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/new-avatar.jpg"
                },
                "email": {
                    "type": "string",
                    "example": "newemail@example.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "Jane Doe"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "phone": {
                    "type": "string",
                    "example": "+0987654321"
                },
                "status": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.UserInfo": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "admin@example.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "Administrator"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "status": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "dto.UserListResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/dto.PaginationInfo"
                }
            }
        },
        "dto.UserProjectResponse": {
            "type": "object",
            "properties": {
                "joined_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "project_id": {
                    "type": "integer",
                    "example": 1
                },
                "project_name": {
                    "type": "string",
                    "example": "Project Alpha"
                },
                "role": {
                    "$ref": "#/definitions/dto.RoleResponse"
                },
                "status": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "admin@example.com"
                },
                "full_name": {
                    "type": "string",
                    "example": "Administrator"
                },
                "global_roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.RoleResponse"
                    }
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "last_login_at": {
                    "type": "string",
                    "example": "2024-01-01T12:00:00Z"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PermissionResponse"
                    }
                },
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "project_roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserProjectResponse"
                    }
                },
                "status": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "username": {
                    "type": "string",
                    "example": "admin"
                }
            }
        },
        "dto.UserSearchRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Common filters shortcuts",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRange"
                        }
                    ]
                },
                "departments": {
                    "description": "Department filter",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "email_pattern": {
                    "description": "Email fuzzy match",
                    "type": "string"
                },
                "exclude_fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filters": {
                    "description": "Filters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SearchFilter"
                    }
                },
                "fullname_pattern": {
                    "description": "Full name fuzzy match",
                    "type": "string"
                },
                "include": {
                    "description": "Include related entities",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include_fields": {
                    "description": "Include/Exclude fields",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "keyword": {
                    "description": "Search keyword (for general text search)",
                    "type": "string"
                },
                "last_login_range": {
                    "description": "Last login time range",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.DateRange"
                        }
                    ]
                },
                "page": {
                    "description": "Pagination",
                    "type": "integer",
                    "minimum": 1
                },
                "project_id": {
                    "type": "integer"
                },
                "project_ids": {
                    "description": "Project ID filter",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "role_ids": {
                    "description": "Role ID filter",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "size": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 1
                },
                "sort": {
                    "description": "Sort",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SortOption"
                    }
                },
                "status": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "updated_at": {
                    "$ref": "#/definitions/dto.DateRange"
                },
                "user_id": {
                    "type": "integer"
                },
                "username_pattern": {
                    "description": "User-specific filter shortcuts",
                    "type": "string"
                }
            }
        },
        "dto.UserStatistics": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer",
                    "example": 120
                },
                "inactive": {
                    "type": "integer",
                    "example": 30
                },
                "new_this_week": {
                    "type": "integer",
                    "example": 20
                },
                "new_today": {
                    "type": "integer",
                    "example": 5
                },
                "total": {
                    "type": "integer",
                    "example": 150
                }
            }
        },
        "handler.Groundtruth": {
            "type": "object",
            "properties": {
                "container": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "function": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metric": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pod": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "service": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "span": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "handler.Node": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/handler.Node"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "range": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "handler.Pair": {
            "type": "object",
            "properties": {
                "source": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            }
        },
        "handler.Resources": {
            "type": "object",
            "properties": {
                "app_labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "container_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "database_app_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dns_app_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "http_app_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jvm_app_names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "network_pairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.Pair"
                    }
                }
            }
        },
        "propagation.MapCarrier": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}